<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>博客</title>
  
  
  <link href="http://feelerice.github.io/atom.xml" rel="self"/>
  
  <link href="http://feelerice.github.io/"/>
  <updated>2021-10-17T06:57:33.549Z</updated>
  <id>http://feelerice.github.io/</id>
  
  <author>
    <name>我吃冰淇淋</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>537.复数乘法</title>
    <link href="http://feelerice.github.io/2021/10/17/537-%E5%A4%8D%E6%95%B0%E4%B9%98%E6%B3%95/"/>
    <id>http://feelerice.github.io/2021/10/17/537-%E5%A4%8D%E6%95%B0%E4%B9%98%E6%B3%95/</id>
    <published>2021-10-17T06:57:03.000Z</published>
    <updated>2021-10-17T06:57:33.549Z</updated>
    
    <content type="html"><![CDATA[<h1 id="537-复数乘法"><a href="#537-复数乘法" class="headerlink" title="537.复数乘法"></a>537.复数乘法</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;537-复数乘法&quot;&gt;&lt;a href=&quot;#537-复数乘法&quot; class=&quot;headerlink&quot; title=&quot;537.复数乘法&quot;&gt;&lt;/a&gt;537.复数乘法&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="算法" scheme="http://feelerice.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/categories/LeetCode/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/LeetCode/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="数字与字符串间转换" scheme="http://feelerice.github.io/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E6%95%B0%E5%AD%97%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%97%B4%E8%BD%AC%E6%8D%A2/"/>
    
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/tags/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/tags/LeetCode/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>553.最优除法</title>
    <link href="http://feelerice.github.io/2021/10/17/553-%E6%9C%80%E4%BC%98%E9%99%A4%E6%B3%95/"/>
    <id>http://feelerice.github.io/2021/10/17/553-%E6%9C%80%E4%BC%98%E9%99%A4%E6%B3%95/</id>
    <published>2021-10-17T05:50:32.000Z</published>
    <updated>2021-10-17T07:04:29.575Z</updated>
    
    <content type="html"><![CDATA[<h1 id="553-最优除法"><a href="#553-最优除法" class="headerlink" title="553.最优除法"></a>553.最优除法</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给定一组正整数，相邻的整数之间将会进行浮点除法操作。例如， [2,3,4] -&gt; 2 / 3 / 4 。</p><p>但是，你可以在任意位置添加任意数目的括号，来改变算数的优先级。你需要找出怎么添加括号，才能得到最大的结果，并且返回相应的字符串格式的表达式。你的表达式不应该含有冗余的括号。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">输入: [1000,100,10,2]</span><br><span class="line">输出: &quot;1000/(100/10/2)&quot;</span><br><span class="line">解释:</span><br><span class="line">1000/(100/10/2) = 1000/((100/10)/2) = 200</span><br><span class="line">但是，以下加粗的括号 &quot;1000/((100/10)/2)&quot; 是冗余的，</span><br><span class="line">因为他们并不影响操作的优先级，所以你需要返回 &quot;1000/(100/10/2)&quot;。</span><br><span class="line"></span><br><span class="line">其他用例:</span><br><span class="line">1000/(100/10)/2 = 50</span><br><span class="line">1000/(100/(10/2)) = 50</span><br><span class="line">1000/100/10/2 = 0.5</span><br><span class="line">1000/100/(10/2) = 2</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><ol><li>输入数组的长度在 [1, 10] 之间。</li><li>数组中每个元素的大小都在 [2, 1000] 之间。</li><li>每个测试用例只有一个最优除法解。</li></ol><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>对于一个分数要求的最大值我们只需要使得分子最大，分母最小即可</p><p>对于一个例子如：<code>a/b/c/d/e/f</code>而言：</p><script type="math/tex; mode=display">\begin{equation}\begin{split} max(a / b / c / d / e / f )&= max(\frac {a}{b * c * d * f }) \\\end{split}\end{equation}</script><p>其<code>b</code>一定是作为分数的分母的，而<code>a</code>一定是作为分母存在的。有因为任意数字的取值范围为<code>[2, 1000]</code>，有因为我们添加括号会使得括号内的式子先运算。对于括号内的式子而言如其又单独成为了一个全为除法的式子，其上面的式子为例，我们将其变为：<code>a/b/(c/d/e/f)</code>可以得到：</p><script type="math/tex; mode=display">\begin{equation}\begin{split}a/b/(c/d/e/f)&= \frac {a}{b} / (\frac {c}{ d * e* f}) \\&= \frac {a}{b} * (\frac {d * e* f}{ c}) \\&= \frac {a * d * e * f}{ b * c}\end{split}\end{equation}</script><p>所以我们可以通过括号的操作将分母的数字，反转为分母。那么对于任意长度大于三的式子都存在以下关系：</p><script type="math/tex; mode=display">\begin{equation}\begin{split}max(num[0]/num[1]/num[2]/.../num[n] ) &= num[0]/(num[1]/num[2]/.../num[n] ) \\&= num[0]/(\frac {num[1]}{num[2] * num[3] * ... * num[n]}) \\&= num[0] * (\frac {num[2] * num[3] * ... * num[n]}{num[1]}) \\&= \frac {num[0] * num[2] * num[3] * ... * num[n]}{num[1]}\end{split}\end{equation}</script><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">optimalDivision</span><span class="params">(<span class="keyword">int</span>[] nums)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n = nums.length;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>] + <span class="string">&quot;&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">2</span>)</span><br><span class="line">        <span class="keyword">return</span> nums[<span class="number">0</span>] + <span class="string">&quot;/&quot;</span> + nums[<span class="number">1</span>];</span><br><span class="line"></span><br><span class="line">    StringBuilder res = <span class="keyword">new</span> StringBuilder(nums[<span class="number">0</span>] + <span class="string">&quot;/(&quot;</span> + nums[<span class="number">1</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i &lt; nums.length; i++) &#123;</span><br><span class="line">        res.append(<span class="string">&quot;/&quot;</span> + nums[i]);</span><br><span class="line">    &#125;</span><br><span class="line">    res.append(<span class="string">&quot;)&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> res.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;553-最优除法&quot;&gt;&lt;a href=&quot;#553-最优除法&quot; class=&quot;headerlink&quot; title=&quot;553.最优除法&quot;&gt;&lt;/a&gt;553.最优除法&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="算法" scheme="http://feelerice.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/categories/LeetCode/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/LeetCode/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="数字与字符串间转换" scheme="http://feelerice.github.io/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E6%95%B0%E5%AD%97%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%97%B4%E8%BD%AC%E6%8D%A2/"/>
    
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/tags/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/tags/LeetCode/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>539.最小时间差</title>
    <link href="http://feelerice.github.io/2021/10/17/539-%E6%9C%80%E5%B0%8F%E6%97%B6%E9%97%B4%E5%B7%AE/"/>
    <id>http://feelerice.github.io/2021/10/17/539-%E6%9C%80%E5%B0%8F%E6%97%B6%E9%97%B4%E5%B7%AE/</id>
    <published>2021-10-17T02:50:15.000Z</published>
    <updated>2021-10-17T03:12:55.913Z</updated>
    
    <content type="html"><![CDATA[<h1 id="539-最小时间差"><a href="#539-最小时间差" class="headerlink" title="539.最小时间差"></a>539.最小时间差</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给定一个 24 小时制（小时:分钟 <strong>“HH:MM”</strong>）的时间列表，找出列表中任意两个时间的最小时间差并以分钟数表示。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>示例 1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：timePoints = [&quot;23:59&quot;,&quot;00:00&quot;]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：timePoints = [&quot;00:00&quot;,&quot;23:59&quot;,&quot;00:00&quot;]</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><ul><li><code>2 &lt;= timePoints &lt;= 2 * 104</code></li><li><code>timePoints[i]</code> 格式为 <strong>“HH:MM”</strong></li></ul><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>我们可以先将timePoints数组进行排序，然后再遍历数组查找差值最小的。排序我们直接使用当前节点与00：00的分钟数相比较。</p><p>得到当前时间与00：00的分钟数的函数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMinute</span><span class="params">(String time)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//HH:MM</span></span><br><span class="line">    <span class="keyword">char</span>[] t = time.toCharArray();</span><br><span class="line">    <span class="keyword">int</span> hour = (t[<span class="number">0</span>] - <span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + (t[<span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">int</span> minute = (t[<span class="number">3</span>] - <span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + (t[<span class="number">4</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">return</span> hour * <span class="number">60</span> + minute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findMinDifference</span><span class="params">(List&lt;String&gt; timePoints)</span> </span>&#123;</span><br><span class="line">    Collections.sort(timePoints, (s1, s2) -&gt; getMinute(s1) - getMinute(s2));</span><br><span class="line">    <span class="keyword">int</span> min = Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; timePoints.size(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> dif =getMinute(timePoints.get(<span class="number">0</span>)) -  getMinute(timePoints.get(timePoints.size() - <span class="number">1</span>)) + <span class="number">1440</span>;</span><br><span class="line">            min = Math.min(dif, min);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> dif = getMinute(timePoints.get(i)) - getMinute(timePoints.get(i - <span class="number">1</span>));</span><br><span class="line">            min = Math.min(dif, min);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> min;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">int</span> <span class="title">getMinute</span><span class="params">(String time)</span> </span>&#123;</span><br><span class="line">    <span class="comment">//HH:MM</span></span><br><span class="line">    <span class="keyword">char</span>[] t = time.toCharArray();</span><br><span class="line">    <span class="keyword">int</span> hour = (t[<span class="number">0</span>] - <span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + (t[<span class="number">1</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line">    <span class="keyword">int</span> minute = (t[<span class="number">3</span>] - <span class="string">&#x27;0&#x27;</span>) * <span class="number">10</span> + (t[<span class="number">4</span>] - <span class="string">&#x27;0&#x27;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> hour * <span class="number">60</span> + minute;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;539-最小时间差&quot;&gt;&lt;a href=&quot;#539-最小时间差&quot; class=&quot;headerlink&quot; title=&quot;539.最小时间差&quot;&gt;&lt;/a&gt;539.最小时间差&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="算法" scheme="http://feelerice.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/categories/LeetCode/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/LeetCode/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="数字与字符串间转换" scheme="http://feelerice.github.io/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E6%95%B0%E5%AD%97%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%97%B4%E8%BD%AC%E6%8D%A2/"/>
    
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/tags/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/tags/LeetCode/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>506.相对名次</title>
    <link href="http://feelerice.github.io/2021/10/17/506-%E7%9B%B8%E5%AF%B9%E5%90%8D%E6%AC%A1/"/>
    <id>http://feelerice.github.io/2021/10/17/506-%E7%9B%B8%E5%AF%B9%E5%90%8D%E6%AC%A1/</id>
    <published>2021-10-17T02:36:51.000Z</published>
    <updated>2021-10-17T02:47:51.563Z</updated>
    
    <content type="html"><![CDATA[<h1 id="506-相对名次"><a href="#506-相对名次" class="headerlink" title="506.相对名次"></a>506.相对名次</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给出 N 名运动员的成绩，找出他们的相对名次并授予前三名对应的奖牌。前三名运动员将会被分别授予 “金牌”，“银牌” 和“ 铜牌”（”Gold Medal”, “Silver Medal”, “Bronze Medal”）。</p><p>(注：分数越高的选手，排名越靠前。)</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: [5, 4, 3, 2, 1]</span><br><span class="line">输出: [&quot;Gold Medal&quot;, &quot;Silver Medal&quot;, &quot;Bronze Medal&quot;, &quot;4&quot;, &quot;5&quot;]</span><br><span class="line">解释: 前三名运动员的成绩为前三高的，因此将会分别被授予 “金牌”，“银牌”和“铜牌” (&quot;Gold Medal&quot;, &quot;Silver Medal&quot; and &quot;Bronze Medal&quot;).</span><br><span class="line">余下的两名运动员，我们只需要通过他们的成绩计算将其相对名次即可。</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><ol><li>N 是一个正整数并且不会超过 10000。</li><li>所有运动员的成绩都不相同。</li></ol><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>首先我们克隆一个score数组为clone，将clone进行排序之后，clone中就对应这实际的排名。我们在对score进行遍历，并且查找clone中该位置的实际排名进行输入。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> String[] findRelativeRanks(<span class="keyword">int</span>[] score) &#123;</span><br><span class="line">    <span class="keyword">int</span> n = score.length;</span><br><span class="line">    String[] strs = <span class="keyword">new</span> String[n];</span><br><span class="line">    <span class="keyword">int</span>[] clone = score.clone();</span><br><span class="line">    Arrays.sort(clone);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        <span class="keyword">int</span> rank = n - Arrays.binarySearch(clone, score[i]);</span><br><span class="line">        <span class="keyword">if</span> (rank == <span class="number">1</span>) &#123;</span><br><span class="line">            strs[i] = <span class="string">&quot;Gold Medal&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rank == <span class="number">2</span>) &#123;</span><br><span class="line">            strs[i] = <span class="string">&quot;Silver Medal&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (rank == <span class="number">3</span>) &#123;</span><br><span class="line">            strs[i] = <span class="string">&quot;Bronze Medal&quot;</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            strs[i] = String.valueOf(rank);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> strs;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;506-相对名次&quot;&gt;&lt;a href=&quot;#506-相对名次&quot; class=&quot;headerlink&quot; title=&quot;506.相对名次&quot;&gt;&lt;/a&gt;506.相对名次&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="算法" scheme="http://feelerice.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/categories/LeetCode/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/LeetCode/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="数字与字符串间转换" scheme="http://feelerice.github.io/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E6%95%B0%E5%AD%97%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%97%B4%E8%BD%AC%E6%8D%A2/"/>
    
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/tags/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/tags/LeetCode/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>412.Fizz-Buzz</title>
    <link href="http://feelerice.github.io/2021/10/17/412-Fizz-Buzz/"/>
    <id>http://feelerice.github.io/2021/10/17/412-Fizz-Buzz/</id>
    <published>2021-10-17T02:15:45.000Z</published>
    <updated>2021-10-17T02:35:20.395Z</updated>
    
    <content type="html"><![CDATA[<h1 id="412-Fizz-Buzz"><a href="#412-Fizz-Buzz" class="headerlink" title="412.Fizz-Buzz"></a>412.Fizz-Buzz</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给你一个整数 n ，找出从 1 到 n 各个整数的 Fizz Buzz 表示，并用字符串数组 answer（下标从 1 开始）返回结果，其中：</p><ul><li>answer[i] == “FizzBuzz” 如果 i 同时是 3 和 5 的倍数。</li><li>answer[i] == “Fizz” 如果 i 是 3 的倍数。</li><li>answer[i] == “Buzz” 如果 i 是 5 的倍数。</li><li>answer[i] == i 如果上述条件全不满足。</li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>示例 1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 3</span><br><span class="line">输出：[&quot;1&quot;,&quot;2&quot;,&quot;Fizz&quot;]</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 5</span><br><span class="line">输出：[&quot;1&quot;,&quot;2&quot;,&quot;Fizz&quot;,&quot;4&quot;,&quot;Buzz&quot;]</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 15</span><br><span class="line">输出：[&quot;1&quot;,&quot;2&quot;,&quot;Fizz&quot;,&quot;4&quot;,&quot;Buzz&quot;,&quot;Fizz&quot;,&quot;7&quot;,&quot;8&quot;,&quot;Fizz&quot;,&quot;Buzz&quot;,&quot;11&quot;,&quot;Fizz&quot;,&quot;13&quot;,&quot;14&quot;,&quot;FizzBuzz&quot;]</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><ul><li><code>1 &lt;= n &lt;= 104</code></li></ul><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>暴力解答 。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> List&lt;String&gt; <span class="title">fizzBuzz</span><span class="params">(<span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    List&lt;String&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n + <span class="number">1</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span> &amp;&amp; i % <span class="number">5</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            list.add(<span class="string">&quot;FizzBuzz&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">3</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            list.add(<span class="string">&quot;Fizz&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (i % <span class="number">5</span> == <span class="number">0</span>)&#123;</span><br><span class="line">            list.add(<span class="string">&quot;Buzz&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            list.add(i + <span class="string">&quot;&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> list;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;412-Fizz-Buzz&quot;&gt;&lt;a href=&quot;#412-Fizz-Buzz&quot; class=&quot;headerlink&quot; title=&quot;412.Fizz-Buzz&quot;&gt;&lt;/a&gt;412.Fizz-Buzz&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; cla</summary>
      
    
    
    
    <category term="算法" scheme="http://feelerice.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/categories/LeetCode/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/LeetCode/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="数字与字符串间转换" scheme="http://feelerice.github.io/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E6%95%B0%E5%AD%97%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%97%B4%E8%BD%AC%E6%8D%A2/"/>
    
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/tags/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/tags/LeetCode/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>299.猜数字游戏</title>
    <link href="http://feelerice.github.io/2021/10/17/299-%E7%8C%9C%E6%95%B0%E5%AD%97%E6%B8%B8%E6%88%8F/"/>
    <id>http://feelerice.github.io/2021/10/17/299-%E7%8C%9C%E6%95%B0%E5%AD%97%E6%B8%B8%E6%88%8F/</id>
    <published>2021-10-17T01:39:34.000Z</published>
    <updated>2021-10-17T02:13:38.438Z</updated>
    
    <content type="html"><![CDATA[<h1 id="299-猜数字游戏"><a href="#299-猜数字游戏" class="headerlink" title="299.猜数字游戏"></a>299.猜数字游戏</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>你在和朋友一起玩 猜数字（Bulls and Cows）游戏，该游戏规则如下：</p><ol><li>你写出一个秘密数字，并请朋友猜这个数字是多少。</li><li>朋友每猜测一次，你就会给他一个提示，告诉他的猜测数字中有多少位属于数字和确切位置都猜对了（称为“Bulls”, 公牛），有多少位属于数字猜对了但是位置不对（称为“Cows”, 奶牛）。</li><li>朋友根据提示继续猜，直到猜出秘密数字。</li></ol><p>请写出一个根据秘密数字和朋友的猜测数返回提示的函数，返回字符串的格式为 xAyB ，x 和 y 都是数字，A 表示公牛，用 B 表示奶牛。</p><ul><li>xA 表示有 x 位数字出现在秘密数字中，且位置都与秘密数字一致。</li><li>yB 表示有 y 位数字出现在秘密数字中，但位置与秘密数字不一致。</li></ul><p>请注意秘密数字和朋友的猜测数都可能含有重复数字，每位数字只能统计一次。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>示例 1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: secret = &quot;1807&quot;, guess = &quot;7810&quot;</span><br><span class="line">输出: &quot;1A3B&quot;</span><br><span class="line">解释: 1 公牛和 3 奶牛。公牛是 8，奶牛是 0, 1 和 7。</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: secret = &quot;1123&quot;, guess = &quot;0111&quot;</span><br><span class="line">输出: &quot;1A1B&quot;</span><br><span class="line">解释: 朋友猜测数中的第一个 1 是公牛，第二个或第三个 1 可被视为奶牛。</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p><strong>说明:</strong> 你可以假设秘密数字和朋友的猜测数都只包含数字，并且它们的长度永远相等。</p><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>对于本道题来说，如果我们先去除公牛的数。那就变成了在两个字符串中B串中的元素有多少个元素可以和A串中的元素一一对应（每个元素只能对应一次）。所以我们可以使用两个hash表，一个用于记录A串中元素出现的次数，另一个用于记录B串中元素出现的次数。而这里的元素只存在<code>0-9</code>所以我们可以使用<code>int</code>类的数组来进行替代。例如：</p><ul><li>secret = “0102”与guess = “1021”</li><li>0的母牛个数为：Math.min(nums(secret, 0), nums(guess, 0)) = 1</li><li>1的母牛个数为：Math.min(nums(secret, 1), nums(guess, 1)) = 1</li><li>2的母牛个数为：Math.min(nums(secret, 2), nums(guess, 2)) = 1</li><li>答案为3</li></ul><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getHint</span><span class="params">(String secret, String guess)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] a = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">int</span>[] b = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> numA = <span class="number">0</span>, numB = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; secret.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (secret.charAt(i) == guess.charAt(i)) &#123;</span><br><span class="line">            numA++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="comment">//去除掉所有相同字符的子串,统计其每种元素出现的个数</span></span><br><span class="line">            a[secret.charAt(i) - <span class="string">&#x27;0&#x27;</span>]++;</span><br><span class="line">            b[guess.charAt(i) - <span class="string">&#x27;0&#x27;</span>]++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">        numB += Math.min(a[i], b[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> numA + <span class="string">&quot;A&quot;</span> + numB + <span class="string">&quot;B&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;299-猜数字游戏&quot;&gt;&lt;a href=&quot;#299-猜数字游戏&quot; class=&quot;headerlink&quot; title=&quot;299.猜数字游戏&quot;&gt;&lt;/a&gt;299.猜数字游戏&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="算法" scheme="http://feelerice.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/categories/LeetCode/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/LeetCode/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="数字与字符串间转换" scheme="http://feelerice.github.io/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E6%95%B0%E5%AD%97%E4%B8%8E%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%97%B4%E8%BD%AC%E6%8D%A2/"/>
    
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/tags/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/tags/LeetCode/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>535.TinyURL的加密与解密</title>
    <link href="http://feelerice.github.io/2021/10/16/535-TinyURL%E7%9A%84%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86/"/>
    <id>http://feelerice.github.io/2021/10/16/535-TinyURL%E7%9A%84%E5%8A%A0%E5%AF%86%E4%B8%8E%E8%A7%A3%E5%AF%86/</id>
    <published>2021-10-16T15:05:34.000Z</published>
    <updated>2021-10-16T15:10:43.564Z</updated>
    
    <content type="html"><![CDATA[<h1 id="535-TinyURL的加密与解密"><a href="#535-TinyURL的加密与解密" class="headerlink" title="535.TinyURL的加密与解密"></a>535.TinyURL的加密与解密</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>TinyURL是一种URL简化服务， 比如：当你输入一个URL <code>https://leetcode.com/problems/design-tinyurl</code>时，它将返回一个简化的URL <code>http://tinyurl.com/4e9iAk</code>.</p><p>要求：设计一个 TinyURL 的加密 encode 和解密 decode 的方法。你的加密和解密算法如何设计和运作是没有限制的，你只需要保证一个URL可以被加密成一个TinyURL，并且这个TinyURL可以用解密方法恢复成原本的URL。</p><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>我们直接使用哈希值来进行计算。使用一个map来存放加密的URL与解密的URL</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Codec</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Map&lt;String, String&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> String s = <span class="string">&quot;http://tinyurl.com/&quot;</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Encodes a URL to a shortened URL.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">encode</span><span class="params">(String longUrl)</span> </span>&#123;</span><br><span class="line">        String ans = s + longUrl.hashCode();</span><br><span class="line">        map.put(ans, longUrl);</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// Decodes a shortened URL to its original URL.</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">decode</span><span class="params">(String shortUrl)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> map.get(shortUrl);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;535-TinyURL的加密与解密&quot;&gt;&lt;a href=&quot;#535-TinyURL的加密与解密&quot; class=&quot;headerlink&quot; title=&quot;535.TinyURL的加密与解密&quot;&gt;&lt;/a&gt;535.TinyURL的加密与解密&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="算法" scheme="http://feelerice.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/categories/LeetCode/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/LeetCode/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="字符的统计" scheme="http://feelerice.github.io/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%AD%97%E7%AC%A6%E7%9A%84%E7%BB%9F%E8%AE%A1/"/>
    
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/tags/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/tags/LeetCode/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>467.环绕字符串中唯一的子字符串</title>
    <link href="http://feelerice.github.io/2021/10/16/467-%E7%8E%AF%E7%BB%95%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E5%94%AF%E4%B8%80%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    <id>http://feelerice.github.io/2021/10/16/467-%E7%8E%AF%E7%BB%95%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E5%94%AF%E4%B8%80%E7%9A%84%E5%AD%90%E5%AD%97%E7%AC%A6%E4%B8%B2/</id>
    <published>2021-10-16T14:13:16.000Z</published>
    <updated>2021-10-16T15:05:36.937Z</updated>
    
    <content type="html"><![CDATA[<h1 id="467-环绕字符串中唯一的子字符串"><a href="#467-环绕字符串中唯一的子字符串" class="headerlink" title="467.环绕字符串中唯一的子字符串"></a>467.环绕字符串中唯一的子字符串</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>把字符串 s 看作是<code>“abcdefghijklmnopqrstuvwxyz”</code>的无限环绕字符串，所以 s 看起来是这样的：<code>&quot;...zabcdefghijklmnopqrstuvwxyzabcdefghijklmnopqrstuvwxyzabcd....&quot;</code>. </p><p>现在我们有了另一个字符串 p 。你需要的是找出 s 中有多少个唯一的 p 的非空子串，尤其是当你的输入是字符串 p ，你需要输出字符串 s 中 p 的不同的非空子串的数目。 </p><p>注意: p 仅由小写的英文字母组成，p 的大小可能超过 10000。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>示例 1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;a&quot;</span><br><span class="line">输出: 1</span><br><span class="line">解释: 字符串 S 中只有一个&quot;a&quot;子字符。</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;cac&quot;</span><br><span class="line">输出: 2</span><br><span class="line">解释: 字符串 S 中的字符串“cac”只有两个子串“a”、“c”。.</span><br></pre></td></tr></table></figure><p>示例 3:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;zab&quot;</span><br><span class="line">输出: 6</span><br><span class="line">解释: 在字符串 S 中有六个子串“z”、“a”、“b”、“za”、“ab”、“zab”。.</span><br></pre></td></tr></table></figure><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>对于这道题而言，其本质就是一个寻找特殊非空子串。而这个特殊点在于：这个子串是否是由连续的字母组成（字母z后面接a）。</p><p>对于两个以相同字母结尾的子串而言，长的字串的结果显然是包含短字串的结果的例如：</p><ul><li><p>s = “abccb”</p></li><li><p>s1 = “abc”，s2 = “bc”</p></li><li>s1的子串有：a，b，c，ab，bc，abc</li><li>s2的子串有：b，c，bc</li><li>而s的答案为6</li></ul><p>从上面的例子来看对于由一些以相同字母结尾的子串所构成的字符串而言，其答案为较长的子串的答案。</p><p>如果是以几个不同的字母结尾的子串结尾所构成的字符串而言呢？</p><ul><li>s = “abcefg”</li><li>s1 = “abc”，s2 = “efg”</li><li>s1的子串有：a，b，c，ab，bc，abc</li><li>s2的子串有：e，f，g，ef，fg，efg</li><li>而s的答案为12</li></ul><p>从上面的例子来看对于由几个不同的字母结尾的子串结尾所构成的字符串而言，其答案不同字符串结尾的子串的和。</p><p>并且对于一个字母连续递增的字符串而言，其能组成的最多连续子串的数量是与其组成有关的。例如以<code>abc</code>字符串而言：</p><p><code>ans = num(a) + num(b) + num(c) = 1 + 2 + 3</code></p><p>所以我们需要判断字符串<code>p</code>中的每一种字母结尾的最大长度。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">findSubstringInWraproundString</span><span class="params">(String p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span>[] chars = p.toCharArray();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">        <span class="comment">//判断当前字符与上一个字符是否连续,对于a、b而言b - a - 1 = 0</span></span><br><span class="line">        <span class="comment">//但是对于za也是连续的，但是a - z - 1 = -26所以我们增加一个取模操作</span></span><br><span class="line">        <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; (chars[i] - chars[i - <span class="number">1</span>] - <span class="number">1</span>) % <span class="number">26</span> == <span class="number">0</span>) &#123;</span><br><span class="line">            count++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            count = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//每遍历一个字母，就刷新arr中对应的结尾的最长长度</span></span><br><span class="line">        arr[chars[i] - <span class="string">&#x27;a&#x27;</span>] = Math.max(arr[chars[i] - <span class="string">&#x27;a&#x27;</span>], count);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i : arr) &#123;</span><br><span class="line">        ans += i;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;467-环绕字符串中唯一的子字符串&quot;&gt;&lt;a href=&quot;#467-环绕字符串中唯一的子字符串&quot; class=&quot;headerlink&quot; title=&quot;467.环绕字符串中唯一的子字符串&quot;&gt;&lt;/a&gt;467.环绕字符串中唯一的子字符串&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;</summary>
      
    
    
    
    <category term="算法" scheme="http://feelerice.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/categories/LeetCode/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/LeetCode/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="字符的统计" scheme="http://feelerice.github.io/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%AD%97%E7%AC%A6%E7%9A%84%E7%BB%9F%E8%AE%A1/"/>
    
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/tags/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/tags/LeetCode/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>696.计数二进制子串</title>
    <link href="http://feelerice.github.io/2021/10/16/696-%E8%AE%A1%E6%95%B0%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AD%90%E4%B8%B2/"/>
    <id>http://feelerice.github.io/2021/10/16/696-%E8%AE%A1%E6%95%B0%E4%BA%8C%E8%BF%9B%E5%88%B6%E5%AD%90%E4%B8%B2/</id>
    <published>2021-10-16T12:47:36.000Z</published>
    <updated>2021-10-16T14:09:31.878Z</updated>
    
    <content type="html"><![CDATA[<h1 id="696-计数二进制子串"><a href="#696-计数二进制子串" class="headerlink" title="696.计数二进制子串"></a>696.计数二进制子串</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给定一个字符串 s，计算具有相同数量 0 和 1 的非空（连续）子字符串的数量，并且这些子字符串中的所有 0 和所有 1 都是连续的。</p><p>重复出现的子串要计算它们出现的次数。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>示例 1 :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;00110011&quot;</span><br><span class="line">输出: 6</span><br><span class="line">解释: 有6个子串具有相同数量的连续1和0：“0011”，“01”，“1100”，“10”，“0011” 和 “01”。</span><br><span class="line"></span><br><span class="line">请注意，一些重复出现的子串要计算它们出现的次数。</span><br><span class="line"></span><br><span class="line">另外，“00110011”不是有效的子串，因为所有的0（和1）没有组合在一起。</span><br></pre></td></tr></table></figure><p>示例 2 :</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;10101&quot;</span><br><span class="line">输出: 4</span><br><span class="line">解释: 有4个子串：“10”，“01”，“10”，“01”，它们具有相同数量的连续1和0。</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><ul><li><code>s.length</code> 在1到50,000之间。</li><li><code>s</code> 只包含“0”或“1”字符。</li></ul><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>我们可以使用一个List用来存储交替出现的连续0或者1的个数，然后再遍历List使结果加上相邻的个数的较小值。</p><p>例如：对于”00110011”而言我们存储List为”2，2，2，2”所以我们返回6</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countBinarySubstrings</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    List&lt;Integer&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">char</span>[] chars = s.toCharArray();</span><br><span class="line">    <span class="keyword">int</span> count = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; chars.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (chars[i] == chars[i - <span class="number">1</span>])</span><br><span class="line">            count++;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            list.add(count);</span><br><span class="line">            count = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    list.add(count);</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">        res += Math.min(list.get(i - <span class="number">1</span>), list.get(i));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>对于<code>解法一</code>中的List集合我们最后都只使用了一次，那么可以将List进行优化。使用一个变量表示前一种字符的个数，一个变量记录当前种类的字符数量。可以直接比较之后就相加。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">countBinarySubstrings</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> res = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> pre = <span class="number">0</span>, now = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span>[] arr = s.toCharArray();</span><br><span class="line">    <span class="keyword">char</span> ch = arr[<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] == ch) &#123;</span><br><span class="line">            now++;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ch = arr[i];</span><br><span class="line">            res += Math.min(pre, now);</span><br><span class="line">            pre = now;</span><br><span class="line">            now = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    res += Math.min(pre, now);</span><br><span class="line">    <span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;696-计数二进制子串&quot;&gt;&lt;a href=&quot;#696-计数二进制子串&quot; class=&quot;headerlink&quot; title=&quot;696.计数二进制子串&quot;&gt;&lt;/a&gt;696.计数二进制子串&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;head</summary>
      
    
    
    
    <category term="算法" scheme="http://feelerice.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/categories/LeetCode/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/LeetCode/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="字符的统计" scheme="http://feelerice.github.io/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%AD%97%E7%AC%A6%E7%9A%84%E7%BB%9F%E8%AE%A1/"/>
    
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/tags/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/tags/LeetCode/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>551.学生出勤记录I</title>
    <link href="http://feelerice.github.io/2021/10/16/551-%E5%AD%A6%E7%94%9F%E5%87%BA%E5%8B%A4%E8%AE%B0%E5%BD%95I/"/>
    <id>http://feelerice.github.io/2021/10/16/551-%E5%AD%A6%E7%94%9F%E5%87%BA%E5%8B%A4%E8%AE%B0%E5%BD%95I/</id>
    <published>2021-10-16T09:36:19.000Z</published>
    <updated>2021-10-16T15:10:51.885Z</updated>
    
    <content type="html"><![CDATA[<h1 id="551-学生出勤记录I"><a href="#551-学生出勤记录I" class="headerlink" title="551.学生出勤记录I"></a>551.学生出勤记录I</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给你一个字符串 s 表示一个学生的出勤记录，其中的每个字符用来标记当天的出勤情况（缺勤、迟到、到场）。记录中只含下面三种字符：</p><ul><li>‘A’：Absent，缺勤</li><li>‘L’：Late，迟到</li><li>‘P’：Present，到场</li></ul><p>如果学生能够 同时 满足下面两个条件，则可以获得出勤奖励：</p><ul><li>按 总出勤 计，学生缺勤（’A’）严格 少于两天。</li><li>学生 不会 存在 连续 3 天或 连续 3 天以上的迟到（’L’）记录。</li><li>如果学生可以获得出勤奖励，返回 true ；否则，返回 false 。</li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>示例 1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;PPALLP&quot;</span><br><span class="line">输出：true</span><br><span class="line">解释：学生缺勤次数少于 2 次，且不存在 3 天或以上的连续迟到记录。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;PPALLL&quot;</span><br><span class="line">输出：false</span><br><span class="line">解释：学生最后三天连续迟到，所以不满足出勤奖励的条件。</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><ul><li><code>1 &lt;= s.length &lt;= 1000</code></li><li><code>s[i]</code> 为 <code>&#39;A&#39;</code>、<code>&#39;L&#39;</code> 或 <code>&#39;P&#39;</code></li></ul><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>我们可以使用两个变量分别用来记录<code>A</code>的次数和<code>L</code>的连续次数，然后再比较两个变量的值进行输出。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkRecord</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> num = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.charAt(i) == <span class="string">&#x27;L&#x27;</span>)&#123;</span><br><span class="line">            <span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; s.length() &amp;&amp; s.charAt(i) == <span class="string">&#x27;L&#x27;</span>)&#123;</span><br><span class="line">                count++;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            i--;</span><br><span class="line">            <span class="keyword">if</span> (count &gt;= <span class="number">3</span>)</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (s.charAt(i) == <span class="string">&#x27;A&#x27;</span>)</span><br><span class="line">            num++;</span><br><span class="line">        <span class="keyword">if</span> (num &gt; <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;551-学生出勤记录I&quot;&gt;&lt;a href=&quot;#551-学生出勤记录I&quot; class=&quot;headerlink&quot; title=&quot;551.学生出勤记录I&quot;&gt;&lt;/a&gt;551.学生出勤记录I&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;head</summary>
      
    
    
    
    <category term="算法" scheme="http://feelerice.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/categories/LeetCode/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/LeetCode/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="字符的统计" scheme="http://feelerice.github.io/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%AD%97%E7%AC%A6%E7%9A%84%E7%BB%9F%E8%AE%A1/"/>
    
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/tags/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/tags/LeetCode/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>657.机器人能否返回原点</title>
    <link href="http://feelerice.github.io/2021/10/16/657-%E6%9C%BA%E5%99%A8%E4%BA%BA%E8%83%BD%E5%90%A6%E8%BF%94%E5%9B%9E%E5%8E%9F%E7%82%B9/"/>
    <id>http://feelerice.github.io/2021/10/16/657-%E6%9C%BA%E5%99%A8%E4%BA%BA%E8%83%BD%E5%90%A6%E8%BF%94%E5%9B%9E%E5%8E%9F%E7%82%B9/</id>
    <published>2021-10-16T06:58:22.000Z</published>
    <updated>2021-10-16T09:38:10.578Z</updated>
    
    <content type="html"><![CDATA[<h1 id="657-机器人能否返回原点"><a href="#657-机器人能否返回原点" class="headerlink" title="657.机器人能否返回原点"></a>657.机器人能否返回原点</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>在二维平面上，有一个机器人从原点 (0, 0) 开始。给出它的移动顺序，判断这个机器人在完成移动后是否在 (0, 0) 处结束。</p><p>移动顺序由字符串表示。字符 move[i] 表示其第 i 次移动。机器人的有效动作有 R（右），L（左），U（上）和 D（下）。如果机器人在完成所有动作后返回原点，则返回 true。否则，返回 false。</p><p>注意：机器人“面朝”的方向无关紧要。 “R” 将始终使机器人向右移动一次，“L” 将始终向左移动等。此外，假设每次移动机器人的移动幅度相同。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>示例 1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;UD&quot;</span><br><span class="line">输出: true</span><br><span class="line">解释：机器人向上移动一次，然后向下移动一次。所有动作都具有相同的幅度，因此它最终回到它开始的原点。因此，我们返回 true。</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;LL&quot;</span><br><span class="line">输出: false</span><br><span class="line">解释：机器人向左移动两次。它最终位于原点的左侧，距原点有两次 “移动” 的距离。我们返回 false，因为它在移动结束时没有返回原点。</span><br></pre></td></tr></table></figure><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>对于一个在平面的上坐标我们一般使用平面直角坐标系来进行表示<code>(X,Y)</code>，在这一道题中我们依旧可以使用这样的方法来进行表示。所以对<code>(X,Y)</code>有以下四种操作:</p><ul><li><code>L：X - 1</code></li><li><code>R：X + 1</code></li><li><code>U：Y + 1</code></li><li><code>D：Y - 1</code></li></ul><p>我们最后只需要判断坐标是否都等于0即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">judgeCircle</span><span class="params">(String moves)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> X = <span class="number">0</span>, Y = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; moves.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">char</span> ch = moves.charAt(i);</span><br><span class="line">        <span class="keyword">if</span> (ch ==<span class="string">&#x27;U&#x27;</span>)&#123;</span><br><span class="line">            Y ++;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;D&#x27;</span>)&#123;</span><br><span class="line">            Y--;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;R&#x27;</span>)&#123;</span><br><span class="line">            X++;</span><br><span class="line">        &#125;<span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;L&#x27;</span>)&#123;</span><br><span class="line">            X--;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> X == <span class="number">0</span> &amp;&amp; Y == <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;657-机器人能否返回原点&quot;&gt;&lt;a href=&quot;#657-机器人能否返回原点&quot; class=&quot;headerlink&quot; title=&quot;657.机器人能否返回原点&quot;&gt;&lt;/a&gt;657.机器人能否返回原点&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; cla</summary>
      
    
    
    
    <category term="算法" scheme="http://feelerice.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/categories/LeetCode/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/LeetCode/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="字符的统计" scheme="http://feelerice.github.io/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%AD%97%E7%AC%A6%E7%9A%84%E7%BB%9F%E8%AE%A1/"/>
    
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/tags/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/tags/LeetCode/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>423.从英文中重建数字</title>
    <link href="http://feelerice.github.io/2021/10/16/423-%E4%BB%8E%E8%8B%B1%E6%96%87%E4%B8%AD%E9%87%8D%E5%BB%BA%E6%95%B0%E5%AD%97/"/>
    <id>http://feelerice.github.io/2021/10/16/423-%E4%BB%8E%E8%8B%B1%E6%96%87%E4%B8%AD%E9%87%8D%E5%BB%BA%E6%95%B0%E5%AD%97/</id>
    <published>2021-10-16T05:54:15.000Z</published>
    <updated>2021-10-16T06:50:14.593Z</updated>
    
    <content type="html"><![CDATA[<h1 id="423-从英文中重建数字"><a href="#423-从英文中重建数字" class="headerlink" title="423.从英文中重建数字"></a>423.从英文中重建数字</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给定一个非空字符串，其中包含字母顺序打乱的英文单词表示的数字0-9。按升序输出原始的数字。</p><p>注意:</p><ul><li><code>输入只包含小写英文字母。</code></li><li><code>输入保证合法并可以转换为原始的数字，这意味着像 &quot;abc&quot; 或 &quot;zerone&quot; 的输入是不允许的。</code></li><li><code>输入字符串的长度小于 50,000。</code></li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>示例 1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;owoztneoer&quot;</span><br><span class="line">输出: &quot;012&quot; (zeroonetwo)</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: &quot;fviefuro&quot;</span><br><span class="line">输出: &quot;45&quot; (fourfive)</span><br></pre></td></tr></table></figure><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>对于 <code>zero one tow three four five six seven eight nine</code>来说：</p><ul><li><code>z</code>字母只有<code>zero</code>含有</li><li><code>g</code>字母只有<code>eight</code>含有</li><li><code>w</code>字母只有<code>tow</code>含有</li><li><code>u</code>字母只有<code>four</code>含有</li><li><code>x</code>字母只有<code>six</code>含有</li></ul><p>我们可以通过以上五种可以单独推导出来的单词，来推导其他五种，总结果如下：</p><ol><li><code>zero</code>可以通过字符串中字母<code>z</code>的个数来进行推断</li><li><code>one</code>  可以通过字符串中字母<code>o</code>的个数减去<code>zero</code>、<code>tow</code>、<code>four</code>的个数得到</li><li><code>tow</code>可以通过字符串中字母<code>w</code>的个数来进行推断</li><li><code>three</code>可以通过字符串中字母<code>h</code>的个数减去<code>eight</code>的个数得到</li><li><code>four</code>可以通过字符串中字母<code>u</code>的个数来进行推断</li><li><code>five</code>可以通过字符串中字母<code>f</code>的个数减去<code>four</code>的个数得到</li><li><code>six</code>可以通过字符串中字母<code>x</code>的个数来进行推断</li><li><code>seven</code>可以通过字符串中字母<code>v</code>的个数减去<code>five</code>的个数得到</li><li><code>eight</code>可以通过字符串中字母<code>g</code>的个数进行推断</li><li><code>nine</code>可以通过字符串中字母<code>i</code>的个数减去<code>five</code>、<code>six</code>、<code>eight</code>的个数得到</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">originalDigits</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        arr[s.charAt(i) - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[] nums = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">    nums[<span class="number">0</span>] = arr[<span class="string">&#x27;z&#x27;</span> - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">    nums[<span class="number">8</span>] = arr[<span class="string">&#x27;g&#x27;</span> - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">    nums[<span class="number">2</span>] = arr[<span class="string">&#x27;w&#x27;</span> - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">    nums[<span class="number">4</span>] = arr[<span class="string">&#x27;u&#x27;</span> - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line">    nums[<span class="number">6</span>] = arr[<span class="string">&#x27;x&#x27;</span> - <span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"></span><br><span class="line">    nums[<span class="number">1</span>] = arr[<span class="string">&#x27;o&#x27;</span> - <span class="string">&#x27;a&#x27;</span>] - nums[<span class="number">0</span>] - nums[<span class="number">2</span>] - nums[<span class="number">4</span>];</span><br><span class="line">    nums[<span class="number">3</span>] = arr[<span class="string">&#x27;h&#x27;</span> - <span class="string">&#x27;a&#x27;</span>] - nums[<span class="number">8</span>];</span><br><span class="line">    nums[<span class="number">5</span>] = arr[<span class="string">&#x27;f&#x27;</span> - <span class="string">&#x27;a&#x27;</span>] - nums[<span class="number">4</span>];</span><br><span class="line">    nums[<span class="number">7</span>] = arr[<span class="string">&#x27;v&#x27;</span> - <span class="string">&#x27;a&#x27;</span>] - nums[<span class="number">5</span>];</span><br><span class="line">    nums[<span class="number">9</span>] = arr[<span class="string">&#x27;i&#x27;</span> - <span class="string">&#x27;a&#x27;</span>] - nums[<span class="number">5</span>] - nums[<span class="number">6</span>] - nums[<span class="number">8</span>];</span><br><span class="line">    StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; nums[i]; j++) &#123;</span><br><span class="line">            builder.append(i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> builder.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;423-从英文中重建数字&quot;&gt;&lt;a href=&quot;#423-从英文中重建数字&quot; class=&quot;headerlink&quot; title=&quot;423.从英文中重建数字&quot;&gt;&lt;/a&gt;423.从英文中重建数字&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;</summary>
      
    
    
    
    <category term="算法" scheme="http://feelerice.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/categories/LeetCode/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/LeetCode/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="字符的统计" scheme="http://feelerice.github.io/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%AD%97%E7%AC%A6%E7%9A%84%E7%BB%9F%E8%AE%A1/"/>
    
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/tags/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/tags/LeetCode/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>451.根据字符出现频率排序</title>
    <link href="http://feelerice.github.io/2021/10/16/451-%E6%A0%B9%E6%8D%AE%E5%AD%97%E7%AC%A6%E5%87%BA%E7%8E%B0%E9%A2%91%E7%8E%87%E6%8E%92%E5%BA%8F/"/>
    <id>http://feelerice.github.io/2021/10/16/451-%E6%A0%B9%E6%8D%AE%E5%AD%97%E7%AC%A6%E5%87%BA%E7%8E%B0%E9%A2%91%E7%8E%87%E6%8E%92%E5%BA%8F/</id>
    <published>2021-10-16T03:09:02.000Z</published>
    <updated>2021-10-16T05:52:30.193Z</updated>
    
    <content type="html"><![CDATA[<h1 id="451-根据字符出现频率排序"><a href="#451-根据字符出现频率排序" class="headerlink" title="451.根据字符出现频率排序"></a>451.根据字符出现频率排序</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给定一个字符串，请将字符串里的字符按照出现的频率降序排列。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>示例 1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入:</span><br><span class="line">&quot;tree&quot;</span><br><span class="line"></span><br><span class="line">输出:</span><br><span class="line">&quot;eert&quot;</span><br><span class="line"></span><br><span class="line">解释:</span><br><span class="line">&#x27;e&#x27;出现两次，&#x27;r&#x27;和&#x27;t&#x27;都只出现一次。</span><br><span class="line">因此&#x27;e&#x27;必须出现在&#x27;r&#x27;和&#x27;t&#x27;之前。此外，&quot;eetr&quot;也是一个有效的答案。</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入:</span><br><span class="line">&quot;cccaaa&quot;</span><br><span class="line"></span><br><span class="line">输出:</span><br><span class="line">&quot;cccaaa&quot;</span><br><span class="line"></span><br><span class="line">解释:</span><br><span class="line">&#x27;c&#x27;和&#x27;a&#x27;都出现三次。此外，&quot;aaaccc&quot;也是有效的答案。</span><br><span class="line">注意&quot;cacaca&quot;是不正确的，因为相同的字母必须放在一起。</span><br></pre></td></tr></table></figure><p>示例 3:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入:</span><br><span class="line">&quot;Aabb&quot;</span><br><span class="line"></span><br><span class="line">输出:</span><br><span class="line">&quot;bbAa&quot;</span><br><span class="line"></span><br><span class="line">解释:</span><br><span class="line">此外，&quot;bbaA&quot;也是一个有效的答案，但&quot;Aabb&quot;是不正确的。</span><br><span class="line">注意&#x27;A&#x27;和&#x27;a&#x27;被认为是两种不同的字符。</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>大小写的字母认为是两种不同的字符</p><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>我们直接使用一个map来进行字符的记录，然后在对map根据字母的个数进行排序。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">frequencySort</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">    HashMap&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">char</span> ch = s.charAt(i);</span><br><span class="line">        map.put(ch, map.getOrDefault(ch, <span class="number">0</span>) + <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    ArrayList&lt;Character&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;(map.keySet());</span><br><span class="line">    Collections.sort(list, (o1,o2) -&gt; map.get(o2) - map.get(o1));</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; list.size(); i++) &#123;</span><br><span class="line">        Character ch = list.get(i);</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; map.get(ch); j++) &#123;</span><br><span class="line">            builder.append(ch);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> builder.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;451-根据字符出现频率排序&quot;&gt;&lt;a href=&quot;#451-根据字符出现频率排序&quot; class=&quot;headerlink&quot; title=&quot;451.根据字符出现频率排序&quot;&gt;&lt;/a&gt;451.根据字符出现频率排序&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot;</summary>
      
    
    
    
    <category term="算法" scheme="http://feelerice.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/categories/LeetCode/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/LeetCode/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="字符的统计" scheme="http://feelerice.github.io/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%AD%97%E7%AC%A6%E7%9A%84%E7%BB%9F%E8%AE%A1/"/>
    
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/tags/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/tags/LeetCode/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>49.字母异位词分组</title>
    <link href="http://feelerice.github.io/2021/10/16/49-%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D%E5%88%86%E7%BB%84/"/>
    <id>http://feelerice.github.io/2021/10/16/49-%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D%E5%88%86%E7%BB%84/</id>
    <published>2021-10-16T02:42:44.000Z</published>
    <updated>2021-10-16T02:54:13.863Z</updated>
    
    <content type="html"><![CDATA[<h1 id="49-字母异位词分组"><a href="#49-字母异位词分组" class="headerlink" title="49.字母异位词分组"></a>49.字母异位词分组</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给你一个字符串数组，请你将 <strong>字母异位词</strong> 组合在一起。可以按任意顺序返回结果列表。</p><p><strong>字母异位词</strong> 是由重新排列源单词的字母得到的一个新单词，所有源单词中的字母都恰好只用一次。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>示例 1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: strs = [&quot;eat&quot;, &quot;tea&quot;, &quot;tan&quot;, &quot;ate&quot;, &quot;nat&quot;, &quot;bat&quot;]</span><br><span class="line">输出: [[&quot;bat&quot;],[&quot;nat&quot;,&quot;tan&quot;],[&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;]]</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: strs = [&quot;&quot;]</span><br><span class="line">输出: [[&quot;&quot;]]</span><br></pre></td></tr></table></figure><p>示例 3:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: strs = [&quot;a&quot;]</span><br><span class="line">输出: [[&quot;a&quot;]]</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><ul><li><code>1 &lt;= strs.length &lt;= 104</code></li><li><code>0 &lt;= strs[i].length &lt;= 100</code></li><li><code>strs[i]</code> 仅包含小写字母</li></ul><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这道题目其实就是让我们找到字符串数组中的 <strong>字母异位词</strong> 然后将其放在一个List集合中，最后在所有List返回。</p><p>对于所有的 <strong>字母异位词</strong> 来说，我们将其转化为字符数组，在进行排序之后所得到的数组一定是相同的。所以我们可以使用Map这种数据结构进行解答。以 <strong>字母异位词</strong> 排序后产生的字符数组创建的字符串为<code>key</code>，<code>List</code>为value进行解答</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> List&lt;List&lt;String&gt;&gt; groupAnagrams(String[] strs) &#123;</span><br><span class="line">    HashMap&lt;String, List&lt;String&gt;&gt; map = <span class="keyword">new</span> HashMap&lt;&gt;();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (String str : strs) &#123;</span><br><span class="line">        <span class="keyword">char</span>[] chars = str.toCharArray();</span><br><span class="line">        Arrays.sort(chars);</span><br><span class="line">        String key = <span class="keyword">new</span> String(chars);</span><br><span class="line">        List&lt;String&gt; value = map.getOrDefault(key, <span class="keyword">new</span> ArrayList&lt;String&gt;());</span><br><span class="line">        value.add(str);</span><br><span class="line">        map.put(key, value);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    List&lt;List&lt;String&gt;&gt; lists = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, List&lt;String&gt;&gt; entry : map.entrySet()) &#123;</span><br><span class="line">        lists.add(entry.getValue());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> lists;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;49-字母异位词分组&quot;&gt;&lt;a href=&quot;#49-字母异位词分组&quot; class=&quot;headerlink&quot; title=&quot;49.字母异位词分组&quot;&gt;&lt;/a&gt;49.字母异位词分组&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="算法" scheme="http://feelerice.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/categories/LeetCode/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/LeetCode/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="字符的统计" scheme="http://feelerice.github.io/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%AD%97%E7%AC%A6%E7%9A%84%E7%BB%9F%E8%AE%A1/"/>
    
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/tags/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/tags/LeetCode/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>242.有效的字母异位词</title>
    <link href="http://feelerice.github.io/2021/10/16/242-%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/"/>
    <id>http://feelerice.github.io/2021/10/16/242-%E6%9C%89%E6%95%88%E7%9A%84%E5%AD%97%E6%AF%8D%E5%BC%82%E4%BD%8D%E8%AF%8D/</id>
    <published>2021-10-16T02:07:58.000Z</published>
    <updated>2021-10-16T02:24:54.692Z</updated>
    
    <content type="html"><![CDATA[<h1 id="242-有效的字母异位词"><a href="#242-有效的字母异位词" class="headerlink" title="242.有效的字母异位词"></a>242.有效的字母异位词</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给定两个字符串 s 和 t ，编写一个函数来判断 t 是否是 s 的字母异位词。</p><p><strong>注意：</strong>若 s 和 t 中每个字符出现的次数都相同，则称 s 和 t 互为字母异位词。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>示例 1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;anagram&quot;, t = &quot;nagaram&quot;</span><br><span class="line">输出: true</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: s = &quot;rat&quot;, t = &quot;car&quot;</span><br><span class="line">输出: false</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><ul><li><code>1 &lt;= s.length, t.length &lt;= 5 * 104</code></li><li><code>s</code> 和 <code>t</code> 仅包含小写字母</li></ul><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>对于本题，简化下来的题目依旧是：查找两个字符串中的个中字符数量是否一致。我们不能使用<code>389.找不同</code>中的解法三。这是因为他无法处理以下例子：</p><ul><li>s = “aa”，t = “bb”</li></ul><p>所以我们采用长度为26的数组所组成的哈希表来进行判断。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isAnagram</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        arr[s.charAt(i) - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t.length(); i++) &#123;</span><br><span class="line">        arr[t.charAt(i) - <span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[i] != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;242-有效的字母异位词&quot;&gt;&lt;a href=&quot;#242-有效的字母异位词&quot; class=&quot;headerlink&quot; title=&quot;242.有效的字母异位词&quot;&gt;&lt;/a&gt;242.有效的字母异位词&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;</summary>
      
    
    
    
    <category term="算法" scheme="http://feelerice.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/categories/LeetCode/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/LeetCode/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="字符的统计" scheme="http://feelerice.github.io/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%AD%97%E7%AC%A6%E7%9A%84%E7%BB%9F%E8%AE%A1/"/>
    
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/tags/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/tags/LeetCode/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>383.赎金信</title>
    <link href="http://feelerice.github.io/2021/10/16/383-%E8%B5%8E%E9%87%91%E4%BF%A1/"/>
    <id>http://feelerice.github.io/2021/10/16/383-%E8%B5%8E%E9%87%91%E4%BF%A1/</id>
    <published>2021-10-16T01:48:09.000Z</published>
    <updated>2021-10-16T02:00:44.869Z</updated>
    
    <content type="html"><![CDATA[<h1 id="383-赎金信"><a href="#383-赎金信" class="headerlink" title="383.赎金信"></a>383.赎金信</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给定一个赎金信 (ransom) 字符串和一个杂志(magazine)字符串，判断第一个字符串 ransom 能不能由第二个字符串 magazines 里面的字符构成。如果可以构成，返回 true ；否则返回 false。</p><p>(题目说明：为了不暴露赎金信字迹，要从杂志上搜索各个需要的字母，组成单词来表达意思。杂志字符串中的每个字符只能在赎金信字符串中使用一次。)</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>示例 1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：ransomNote = &quot;a&quot;, magazine = &quot;b&quot;</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：ransomNote = &quot;aa&quot;, magazine = &quot;ab&quot;</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：ransomNote = &quot;aa&quot;, magazine = &quot;aab&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><ul><li>你可以假设两个字符串均只含有小写字母。</li></ul><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>根据题目中的信息我们可以得到，这道题本质实在求<code>ransom</code>字符串是不是<code>magazine</code>字符串的部分字符所组成的。所以我们依旧可以使用哈希表（长度为26的数组来记录每个单词出现的次数，如果不合符则输出<code>false</code>，符合则输出<code>true</code>）。但是又因为在<code>magazine</code>字符串中可能存在<code>ransom</code>不适用的字符串，所以我们需要使用两个数组来进行判断。不过这个时候在两个数组中会有三种情况会出现对应数字不相同：</p><ul><li><code>ransom</code>需要的字符在<code>magazine</code>中不足</li><li><code>ransom</code>不需要的字符</li><li><code>ransom</code>需要的字符在<code>magazine</code>中过多</li></ul><p>所以我们需要先判断当前字符是不是组成<code>ransom</code>的一部分，然后再判断是不是一样的。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">canConstruct</span><span class="params">(String ransomNote, String magazine)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] ran = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">int</span>[] mag = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ransomNote.length(); i++) &#123;</span><br><span class="line">        ran[ransomNote.charAt(i) - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; magazine.length(); i++) &#123;</span><br><span class="line">        mag[magazine.charAt(i) - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; ran.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ran[i] != <span class="number">0</span> &amp;&amp; ran[i] &gt; mag[i])&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;383-赎金信&quot;&gt;&lt;a href=&quot;#383-赎金信&quot; class=&quot;headerlink&quot; title=&quot;383.赎金信&quot;&gt;&lt;/a&gt;383.赎金信&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问</summary>
      
    
    
    
    <category term="算法" scheme="http://feelerice.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/categories/LeetCode/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/LeetCode/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="字符的统计" scheme="http://feelerice.github.io/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%AD%97%E7%AC%A6%E7%9A%84%E7%BB%9F%E8%AE%A1/"/>
    
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/tags/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/tags/LeetCode/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>389.找不同</title>
    <link href="http://feelerice.github.io/2021/10/15/389-%E6%89%BE%E4%B8%8D%E5%90%8C/"/>
    <id>http://feelerice.github.io/2021/10/15/389-%E6%89%BE%E4%B8%8D%E5%90%8C/</id>
    <published>2021-10-15T13:40:46.000Z</published>
    <updated>2021-10-16T02:10:03.323Z</updated>
    
    <content type="html"><![CDATA[<h1 id="389-找不同"><a href="#389-找不同" class="headerlink" title="389.找不同"></a>389.找不同</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给定两个字符串 <strong><em>s</em></strong> 和 <strong><em>t</em></strong>，它们只包含小写字母。</p><p>字符串 <strong><em>t</em></strong> 由字符串<strong><em>s</em></strong>随机重排，然后在随机位置添加一个字母。</p><p>请找出在 <strong><em>t</em></strong> 中被添加的字母。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>示例 1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;abcd&quot;, t = &quot;abcde&quot;</span><br><span class="line">输出：&quot;e&quot;</span><br><span class="line">解释：&#x27;e&#x27; 是那个被添加的字母。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;&quot;, t = &quot;y&quot;</span><br><span class="line">输出：&quot;y&quot;</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;a&quot;, t = &quot;aa&quot;</span><br><span class="line">输出：&quot;a&quot;</span><br></pre></td></tr></table></figure><p>示例 4：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;ae&quot;, t = &quot;aea&quot;</span><br><span class="line">输出：&quot;a&quot;</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><ul><li><code>0 &lt;= s.length &lt;= 1000</code></li><li><code>t.length == s.length + 1</code></li><li><code>s</code> 和 <code>t</code> 只包含小写字母</li></ul><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>我们依旧可以用两个长度为<code>26</code>的数组来分别判断每个字符串中出现的每种字母的个数。然后再对两个数组进行对比，如果有一个位置不相同，则输出对应的字母即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">findTheDifference</span><span class="params">(String s, String t)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span>[] pre = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">int</span>[] last = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        pre[s.charAt(i) - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t.length(); i++) &#123;</span><br><span class="line">        last[t.charAt(i) - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">char</span> ans = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; pre.length; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (pre[i] != last[i])&#123;</span><br><span class="line">            ans = (<span class="keyword">char</span>)(<span class="string">&#x27;a&#x27;</span> + i);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>在<code>解法一</code>中，我们最后判断的依旧是两个数组的不同位置，那么我们可以将两个数组优化成一个数组。也就是对应一个字符串进行<code>++</code>操作，而对另一个字符串进行<code>--</code>操作。如果出现一个位置的数值不为<code>0</code>那就输出对应位置的字母即可。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">    arr[s.charAt(i) - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t.length(); i++) &#123;</span><br><span class="line">    arr[t.charAt(i) - <span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">char</span> ans = <span class="string">&#x27;a&#x27;</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">    <span class="keyword">if</span> (arr[i] != <span class="number">0</span>)&#123;</span><br><span class="line">        ans = (<span class="keyword">char</span>)(<span class="string">&#x27;a&#x27;</span> + i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> ans;</span><br></pre></td></tr></table></figure><h2 id="解法三"><a href="#解法三" class="headerlink" title="解法三"></a>解法三</h2><h3 id="思路-2"><a href="#思路-2" class="headerlink" title="思路"></a>思路</h3><p>对于<code>解法一</code>和<code>解法二</code>中的方法都是查找数组的不同之处。那么如果我们使用异或操作<code>^</code>其作用如下：</p><p><img src="/2021/10/15/389-%E6%89%BE%E4%B8%8D%E5%90%8C/example.png" alt></p><p>由因为给出的两个字符串中，其中一个字符串只是另一个字符串增加一个元素之后进行乱排产生的。所以我们可以使用异或操作来进行判断。</p><h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">char</span> <span class="title">findTheDifference</span><span class="params">(String s, String t)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        ans ^= s.charAt(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; t.length(); i++) &#123;</span><br><span class="line">        ans ^= t.charAt(i);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">char</span>)ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;389-找不同&quot;&gt;&lt;a href=&quot;#389-找不同&quot; class=&quot;headerlink&quot; title=&quot;389.找不同&quot;&gt;&lt;/a&gt;389.找不同&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问</summary>
      
    
    
    
    <category term="算法" scheme="http://feelerice.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/categories/LeetCode/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/LeetCode/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="字符的统计" scheme="http://feelerice.github.io/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%AD%97%E7%AC%A6%E7%9A%84%E7%BB%9F%E8%AE%A1/"/>
    
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/tags/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/tags/LeetCode/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>387.字符串中的第一个唯一字符</title>
    <link href="http://feelerice.github.io/2021/10/15/387-%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%94%AF%E4%B8%80%E5%AD%97%E7%AC%A6/"/>
    <id>http://feelerice.github.io/2021/10/15/387-%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E7%AC%AC%E4%B8%80%E4%B8%AA%E5%94%AF%E4%B8%80%E5%AD%97%E7%AC%A6/</id>
    <published>2021-10-15T13:35:33.000Z</published>
    <updated>2021-10-15T13:40:22.202Z</updated>
    
    <content type="html"><![CDATA[<h1 id="387-字符串中的第一个唯一字符"><a href="#387-字符串中的第一个唯一字符" class="headerlink" title="387.字符串中的第一个唯一字符"></a>387.字符串中的第一个唯一字符</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给定一个字符串，找到它的第一个不重复的字符，并返回它的索引。如果不存在，则返回 -1。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">s = &quot;leetcode&quot;</span><br><span class="line">返回 0</span><br><span class="line"></span><br><span class="line">s = &quot;loveleetcode&quot;</span><br><span class="line">返回 2</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><p>你可以假定该字符串只包含小写字母。</p><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>我们可以使用一个长度为<code>26</code>的 数组用来记录，每一个字母的出现概率。然后再遍历字符串的时候查找本次遍历到的字母是否只出现过一次，如果是那就进行输出，如果不是就继续向后遍历。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">firstUniqChar</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span>[] arr = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">26</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        arr[s.charAt(i) - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (arr[s.charAt(i) - <span class="string">&#x27;a&#x27;</span>] == <span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;387-字符串中的第一个唯一字符&quot;&gt;&lt;a href=&quot;#387-字符串中的第一个唯一字符&quot; class=&quot;headerlink&quot; title=&quot;387.字符串中的第一个唯一字符&quot;&gt;&lt;/a&gt;387.字符串中的第一个唯一字符&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="算法" scheme="http://feelerice.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/categories/LeetCode/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/LeetCode/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="字符的统计" scheme="http://feelerice.github.io/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%AD%97%E7%AC%A6%E7%9A%84%E7%BB%9F%E8%AE%A1/"/>
    
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/tags/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/tags/LeetCode/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>151.翻转字符串里的单词</title>
    <link href="http://feelerice.github.io/2021/10/15/151-%E7%BF%BB%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%87%8C%E7%9A%84%E5%8D%95%E8%AF%8D/"/>
    <id>http://feelerice.github.io/2021/10/15/151-%E7%BF%BB%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E9%87%8C%E7%9A%84%E5%8D%95%E8%AF%8D/</id>
    <published>2021-10-15T07:12:44.000Z</published>
    <updated>2021-10-15T07:50:27.031Z</updated>
    
    <content type="html"><![CDATA[<h1 id="151-翻转字符串里的单词"><a href="#151-翻转字符串里的单词" class="headerlink" title="151.翻转字符串里的单词"></a>151.翻转字符串里的单词</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给你一个字符串 s ，逐个翻转字符串中的所有 单词 。</p><p><strong>单词</strong> 是由非空格字符组成的字符串。s 中使用至少一个空格将字符串中的<strong>单词</strong>分隔开。</p><p>请你返回一个翻转 s 中单词顺序并用单个空格相连的字符串。</p><p>说明：</p><ul><li>输入字符串 s 可以在前面、后面或者单词间包含多余的空格。</li><li>翻转后单词间应当仅用一个空格分隔。</li><li>翻转后的字符串中不应包含额外的空格。</li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>示例 1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;the sky is blue&quot;</span><br><span class="line">输出：&quot;blue is sky the&quot;</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;  hello world  &quot;</span><br><span class="line">输出：&quot;world hello&quot;</span><br><span class="line">解释：输入字符串可以在前面或者后面包含多余的空格，但是翻转后的字符不能包括。</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;a good   example&quot;</span><br><span class="line">输出：&quot;example good a&quot;</span><br><span class="line">解释：如果两个单词间有多余的空格，将翻转后单词间的空格减少到只含一个。</span><br></pre></td></tr></table></figure><p>示例 4：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;  Bob    Loves  Alice   &quot;</span><br><span class="line">输出：&quot;Alice Loves Bob&quot;</span><br></pre></td></tr></table></figure><p>示例 5：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;Alice does not even like bob&quot;</span><br><span class="line">输出：&quot;bob like even not does Alice&quot;</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><ul><li><code>1 &lt;= s.length &lt;= 104</code></li><li><code>s</code> 包含英文大小写字母、数字和空格 <code>&#39; &#39;</code></li><li><code>s</code> 中 <strong>至少存在一个</strong> 单词</li></ul><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><ul><li>请尝试使用 <code>O(1)</code> 额外空间复杂度的原地解法。</li></ul><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>还是先找到单词的边界，然后进行单词的读入。不过需要注意对空格的处理。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">reverseWords</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> last = s.length() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (last &gt; <span class="number">0</span> &amp;&amp; s.charAt(last) == <span class="string">&#x27; &#x27;</span>)&#123;</span><br><span class="line">        last--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = last; i &gt; <span class="number">0</span>;) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.charAt(i - <span class="number">1</span>) == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> start = i;</span><br><span class="line">            <span class="keyword">while</span> (start &lt;= last) &#123;</span><br><span class="line">                builder.append(s.charAt(start));</span><br><span class="line">                start++;</span><br><span class="line">            &#125;</span><br><span class="line">            builder.append(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">            <span class="keyword">while</span> (--i &gt; <span class="number">0</span> &amp;&amp; s.charAt(i) == <span class="string">&#x27; &#x27;</span>);</span><br><span class="line">            last = i;</span><br><span class="line">        &#125;<span class="keyword">else</span></span><br><span class="line">            i--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (builder.length() != <span class="number">0</span>)</span><br><span class="line">        builder.deleteCharAt(builder.length() - <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(s.charAt(<span class="number">0</span>) != <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">        builder.append(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">        <span class="keyword">int</span> start = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (start &lt;= last)&#123;</span><br><span class="line">            builder.append(s.charAt(start));</span><br><span class="line">            start++;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> builder.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;151-翻转字符串里的单词&quot;&gt;&lt;a href=&quot;#151-翻转字符串里的单词&quot; class=&quot;headerlink&quot; title=&quot;151.翻转字符串里的单词&quot;&gt;&lt;/a&gt;151.翻转字符串里的单词&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; cla</summary>
      
    
    
    
    <category term="算法" scheme="http://feelerice.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/categories/LeetCode/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/LeetCode/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="字符串的反转" scheme="http://feelerice.github.io/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%8F%8D%E8%BD%AC/"/>
    
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/tags/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/tags/LeetCode/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
  <entry>
    <title>557.反转字符串中的单词III</title>
    <link href="http://feelerice.github.io/2021/10/15/557-%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%8D%95%E8%AF%8DIII/"/>
    <id>http://feelerice.github.io/2021/10/15/557-%E5%8F%8D%E8%BD%AC%E5%AD%97%E7%AC%A6%E4%B8%B2%E4%B8%AD%E7%9A%84%E5%8D%95%E8%AF%8DIII/</id>
    <published>2021-10-15T06:12:06.000Z</published>
    <updated>2021-10-15T06:13:56.247Z</updated>
    
    <content type="html"><![CDATA[<h1 id="557-反转字符串中的单词III"><a href="#557-反转字符串中的单词III" class="headerlink" title="557.反转字符串中的单词III"></a>557.反转字符串中的单词III</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给定一个字符串，你需要反转字符串中每个单词的字符顺序，同时仍保留空格和单词的初始顺序。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：&quot;Let&#x27;s take LeetCode contest&quot;</span><br><span class="line">输出：&quot;s&#x27;teL ekat edoCteeL tsetnoc&quot;</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><ul><li>在字符串中，每个单词由单个空格分隔，并且字符串中不会有任何额外的空格。</li></ul><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>直接进行遍历，找到一个单词的开始和结尾，然后反转找到的单词。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">reverseWords</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    StringBuilder builder = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">int</span> pre = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.charAt(i) == <span class="string">&#x27; &#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> end = i - <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (end &gt;= pre) &#123;</span><br><span class="line">                builder.append(s.charAt(end));</span><br><span class="line">                end--;</span><br><span class="line">            &#125;</span><br><span class="line">            builder.append(<span class="string">&#x27; &#x27;</span>);</span><br><span class="line">            pre = i + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> end = s.length() - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (end &gt;= pre) &#123;</span><br><span class="line">        builder.append(s.charAt(end));</span><br><span class="line">        end--;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> builder.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;557-反转字符串中的单词III&quot;&gt;&lt;a href=&quot;#557-反转字符串中的单词III&quot; class=&quot;headerlink&quot; title=&quot;557.反转字符串中的单词III&quot;&gt;&lt;/a&gt;557.反转字符串中的单词III&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a hr</summary>
      
    
    
    
    <category term="算法" scheme="http://feelerice.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/categories/LeetCode/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/LeetCode/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
    <category term="字符串的反转" scheme="http://feelerice.github.io/categories/%E5%AD%97%E7%AC%A6%E4%B8%B2/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E5%8F%8D%E8%BD%AC/"/>
    
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/tags/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/tags/LeetCode/"/>
    
    <category term="字符串" scheme="http://feelerice.github.io/tags/%E5%AD%97%E7%AC%A6%E4%B8%B2/"/>
    
  </entry>
  
</feed>
