<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>博客</title>
  
  
  <link href="http://feelerice.github.io/atom.xml" rel="self"/>
  
  <link href="http://feelerice.github.io/"/>
  <updated>2021-10-26T11:22:41.135Z</updated>
  <id>http://feelerice.github.io/</id>
  
  <author>
    <name>我吃冰淇淋</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>19.删除链表的倒数第N个结点</title>
    <link href="http://feelerice.github.io/2021/10/26/19-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E7%BB%93%E7%82%B9/"/>
    <id>http://feelerice.github.io/2021/10/26/19-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E7%BB%93%E7%82%B9/</id>
    <published>2021-10-26T11:10:10.000Z</published>
    <updated>2021-10-26T11:22:41.135Z</updated>
    
    <content type="html"><![CDATA[<h1 id="19-删除链表的倒数第N个结点"><a href="#19-删除链表的倒数第N个结点" class="headerlink" title="19.删除链表的倒数第N个结点"></a>19.删除链表的倒数第N个结点</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给你一个链表，删除链表的倒数第 <code>n</code> 个结点，并且返回链表的头结点。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>示例 1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,3,4,5], n = 2</span><br><span class="line">输出：[1,2,3,5]</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1], n = 1</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2], n = 1</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><ul><li>链表中结点的数目为 <code>sz</code></li><li><code>1 &lt;= sz &lt;= 30</code></li><li><code>0 &lt;= Node.val &lt;= 100</code></li><li><code>1 &lt;= n &lt;= sz</code></li></ul><p>通过次数542,077</p><p>提</p><h2 id="进阶"><a href="#进阶" class="headerlink" title="进阶"></a>进阶</h2><p>你能尝试使用一趟扫描实现吗？</p><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>先获取链表的长度，然后再删除倒数第N个节点。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length = length(head);</span><br><span class="line">    ListNode listNode = <span class="keyword">new</span> ListNode(-<span class="number">1</span>, head);</span><br><span class="line">    ListNode node = listNode;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; length - n; i++) &#123;</span><br><span class="line">        node = node.next;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    node.next = node.next.next;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> listNode.next;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">length</span><span class="params">(ListNode head)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> length = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (head != <span class="keyword">null</span>)&#123;</span><br><span class="line">        head = head.next;</span><br><span class="line">        length++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> length;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p><strong>前后指针（快慢指针）</strong></p><p>使用first和second两个指针，其中first指向second指针的前N个节点，这样当first指向尾结点的时候second就指向我们要删除的节点的前一个节点。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">removeNthFromEnd</span><span class="params">(ListNode head, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    ListNode listNode = <span class="keyword">new</span> ListNode(-<span class="number">1</span>, head);</span><br><span class="line">    ListNode first = head, second = listNode;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">        first = first.next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">while</span> (first != <span class="keyword">null</span>)&#123;</span><br><span class="line">        first = first.next;</span><br><span class="line">        second = second.next;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    second.next = second.next.next;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> listNode.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;19-删除链表的倒数第N个结点&quot;&gt;&lt;a href=&quot;#19-删除链表的倒数第N个结点&quot; class=&quot;headerlink&quot; title=&quot;19.删除链表的倒数第N个结点&quot;&gt;&lt;/a&gt;19.删除链表的倒数第N个结点&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;</summary>
      
    
    
    
    <category term="算法" scheme="http://feelerice.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/categories/LeetCode/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/LeetCode/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="链表" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/"/>
    
    <category term="链表" scheme="http://feelerice.github.io/categories/%E9%93%BE%E8%A1%A8/"/>
    
    <category term="链表的删除" scheme="http://feelerice.github.io/categories/%E9%93%BE%E8%A1%A8/%E9%93%BE%E8%A1%A8%E7%9A%84%E5%88%A0%E9%99%A4/"/>
    
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/tags/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/tags/LeetCode/"/>
    
    <category term="链表" scheme="http://feelerice.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>237.删除链表中的节点</title>
    <link href="http://feelerice.github.io/2021/10/26/237-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/"/>
    <id>http://feelerice.github.io/2021/10/26/237-%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E4%B8%AD%E7%9A%84%E8%8A%82%E7%82%B9/</id>
    <published>2021-10-26T11:05:22.000Z</published>
    <updated>2021-10-26T11:09:36.083Z</updated>
    
    <content type="html"><![CDATA[<h1 id="237-删除链表中的节点"><a href="#237-删除链表中的节点" class="headerlink" title="237.删除链表中的节点"></a>237.删除链表中的节点</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>请编写一个函数，使其可以删除某个链表中给定的（非末尾）节点。传入函数的唯一参数为 <strong>要被删除的节点</strong> 。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>示例 1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [4,5,1,9], node = 5</span><br><span class="line">输出：[4,1,9]</span><br><span class="line">解释：给定你链表中值为 5 的第二个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 1 -&gt; 9.</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [4,5,1,9], node = 1</span><br><span class="line">输出：[4,5,9]</span><br><span class="line">解释：给定你链表中值为 1 的第三个节点，那么在调用了你的函数之后，该链表应变为 4 -&gt; 5 -&gt; 9.</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><ul><li>链表至少包含两个节点。</li><li>链表中所有节点的值都是唯一的。</li><li>给定的节点为非末尾节点并且一定是链表中的一个有效节点。</li><li>不要从你的函数中返回任何结果。</li></ul><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">head = [4,5,1,9],node = 1</span><br><span class="line">1. head = [4,5,9,9]</span><br><span class="line">2. head = [4,5,9]</span><br></pre></td></tr></table></figure><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteNode</span><span class="params">(ListNode node)</span> </span>&#123;</span><br><span class="line">    node.val = node.next.val;</span><br><span class="line">    node.next = node.next.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;237-删除链表中的节点&quot;&gt;&lt;a href=&quot;#237-删除链表中的节点&quot; class=&quot;headerlink&quot; title=&quot;237.删除链表中的节点&quot;&gt;&lt;/a&gt;237.删除链表中的节点&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;</summary>
      
    
    
    
    <category term="算法" scheme="http://feelerice.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/categories/LeetCode/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/LeetCode/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="链表" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/"/>
    
    <category term="链表" scheme="http://feelerice.github.io/categories/%E9%93%BE%E8%A1%A8/"/>
    
    <category term="链表的删除" scheme="http://feelerice.github.io/categories/%E9%93%BE%E8%A1%A8/%E9%93%BE%E8%A1%A8%E7%9A%84%E5%88%A0%E9%99%A4/"/>
    
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/tags/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/tags/LeetCode/"/>
    
    <category term="链表" scheme="http://feelerice.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>203.移除链表元素</title>
    <link href="http://feelerice.github.io/2021/10/26/203-%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0/"/>
    <id>http://feelerice.github.io/2021/10/26/203-%E7%A7%BB%E9%99%A4%E9%93%BE%E8%A1%A8%E5%85%83%E7%B4%A0/</id>
    <published>2021-10-26T10:49:39.000Z</published>
    <updated>2021-10-26T11:05:04.976Z</updated>
    
    <content type="html"><![CDATA[<h1 id="203-移除链表元素"><a href="#203-移除链表元素" class="headerlink" title="203.移除链表元素"></a>203.移除链表元素</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给你一个链表的头节点 <code>head</code> 和一个整数 <code>val</code> ，请你删除链表中所有满足 <code>Node.val == val</code> 的节点，并返回 <strong>新的头节点</strong> 。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>示例 1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [1,2,6,3,4,5,6], val = 6</span><br><span class="line">输出：[1,2,3,4,5]</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [], val = 1</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：head = [7,7,7,7], val = 7</span><br><span class="line">输出：[]</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><ul><li>列表中的节点数目在范围 <code>[0, 104]</code> 内</li><li><code>1 &lt;= Node.val &lt;= 50</code></li><li><code>0 &lt;= val &lt;= 50</code></li></ul><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>暴力求解。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ListNode <span class="title">removeElements</span><span class="params">(ListNode head, <span class="keyword">int</span> val)</span> </span>&#123;</span><br><span class="line">    ListNode node = <span class="keyword">new</span> ListNode(-<span class="number">1</span>, head);</span><br><span class="line">    ListNode n = node;</span><br><span class="line">    <span class="keyword">while</span> (n.next != <span class="keyword">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (n.next.val == val) &#123;</span><br><span class="line">            n.next = n.next.next;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            n = n.next;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> node.next;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;203-移除链表元素&quot;&gt;&lt;a href=&quot;#203-移除链表元素&quot; class=&quot;headerlink&quot; title=&quot;203.移除链表元素&quot;&gt;&lt;/a&gt;203.移除链表元素&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerli</summary>
      
    
    
    
    <category term="算法" scheme="http://feelerice.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/categories/LeetCode/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/LeetCode/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="链表" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/%E9%93%BE%E8%A1%A8/"/>
    
    <category term="链表" scheme="http://feelerice.github.io/categories/%E9%93%BE%E8%A1%A8/"/>
    
    <category term="链表的删除" scheme="http://feelerice.github.io/categories/%E9%93%BE%E8%A1%A8/%E9%93%BE%E8%A1%A8%E7%9A%84%E5%88%A0%E9%99%A4/"/>
    
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/tags/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/tags/LeetCode/"/>
    
    <category term="链表" scheme="http://feelerice.github.io/tags/%E9%93%BE%E8%A1%A8/"/>
    
  </entry>
  
  <entry>
    <title>32.最长有效括号</title>
    <link href="http://feelerice.github.io/2021/10/26/32-%E6%9C%80%E9%95%BF%E6%9C%89%E6%95%88%E6%8B%AC%E5%8F%B7/"/>
    <id>http://feelerice.github.io/2021/10/26/32-%E6%9C%80%E9%95%BF%E6%9C%89%E6%95%88%E6%8B%AC%E5%8F%B7/</id>
    <published>2021-10-26T08:54:01.000Z</published>
    <updated>2021-10-26T09:13:40.123Z</updated>
    
    <content type="html"><![CDATA[<h1 id="32-最长有效括号"><a href="#32-最长有效括号" class="headerlink" title="32.最长有效括号"></a>32.最长有效括号</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给你一个只包含 <code>&#39;(&#39;</code> 和 <code>&#39;)&#39;</code> 的字符串，找出最长有效（格式正确且连续）括号子串的长度。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>示例 1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;(()&quot;</span><br><span class="line">输出：2</span><br><span class="line">解释：最长有效括号子串是 &quot;()&quot;</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;)()())&quot;</span><br><span class="line">输出：4</span><br><span class="line">解释：最长有效括号子串是 &quot;()()&quot;</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;&quot;</span><br><span class="line">输出：0</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><ul><li><code>0 &lt;= s.length &lt;= 3 * 104</code></li><li><code>s[i]</code> 为 <code>&#39;(&#39;</code> 或 <code>&#39;)&#39;</code></li></ul><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>我们在判断字符串中的字符是否匹配一般都是使用栈来进行判断的。对于本题，我们依旧可以使用栈来进行判断。对于一个合法的字符串我们应该如何判断其长度呢？</p><blockquote><p>合法字符串的最后一个字符下标 - 合法字符串的第一个字符下标  + 1</p></blockquote><p>但是对于使用栈来匹配括号是否合法，我们每一次扫描到一个<code>)</code>右括号都需要将前面的<code>(</code>左括号出栈：</p><ul><li>对于<code>(((())))</code>这样的用例我们可以直接在栈中存放左括号的下标来进行计算。</li><li>对于<code>()()()()</code>这样的用例我们却没办法只在栈中存放左括号的下标来进行计算。</li></ul><p>所以我们将计算合法字符串长度的公式进行修改：</p><blockquote><p>​    合法字符的最后一个下标 - （合法字符的第一个下标 - 1）<br> = 合法字符串的组后一个下标 - 不和法字符的最后一个下标</p></blockquote><p>我们修改字符串，即在所有字符串的前面都新增一个<code>)</code>右括号。这样对于上面的用例就变成了：</p><ul><li><code>)(((())))</code></li><li><code>)()()()()</code></li></ul><p>那么我们的栈中存放的东西也应该进行改变，栈存放的内容为：</p><ol><li><code>(</code>左括号的下标</li><li><code>)</code>没有与其相匹配的右括号的下标</li></ol><p>这样每当我们扫描到一个<code>)</code>右括号的时候，我们先弹栈。然后再判断栈：</p><ol><li>如果栈为空，那么弹出的元素就是上一次没有匹配到<code>(</code>左括号的<code>)</code>右括号的下标。我们需要将当前<code>)</code>右括号的下标压入栈中</li><li>如果栈不为空，那么当前的<code>)</code>右括号存在一个左括号与其相匹配。我们可以使用当前坐标和上一个没有匹配到<code>(</code>左括号的<code>)</code>右括号的下标进行合法字符串的长度计算。</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">longestValidParentheses</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    stack.push(-<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; s.length(); i++) &#123;</span><br><span class="line">        <span class="keyword">char</span> ch = s.charAt(i);</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">            stack.push(i);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            stack.pop();</span><br><span class="line">            <span class="keyword">if</span> (stack.isEmpty())&#123;</span><br><span class="line">                stack.push(i);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                ans = Math.max(ans, i - stack.peek());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;32-最长有效括号&quot;&gt;&lt;a href=&quot;#32-最长有效括号&quot; class=&quot;headerlink&quot; title=&quot;32.最长有效括号&quot;&gt;&lt;/a&gt;32.最长有效括号&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="算法" scheme="http://feelerice.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/categories/LeetCode/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/LeetCode/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="栈与递归" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/%E6%A0%88%E4%B8%8E%E9%80%92%E5%BD%92/"/>
    
    <category term="栈与递归" scheme="http://feelerice.github.io/categories/%E6%A0%88%E4%B8%8E%E9%80%92%E5%BD%92/"/>
    
    <category term="栈与计算器" scheme="http://feelerice.github.io/categories/%E6%A0%88%E4%B8%8E%E9%80%92%E5%BD%92/%E6%A0%88%E4%B8%8E%E8%AE%A1%E7%AE%97%E5%99%A8/"/>
    
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/tags/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/tags/LeetCode/"/>
    
    <category term="栈与递归" scheme="http://feelerice.github.io/tags/%E6%A0%88%E4%B8%8E%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>636.函数的独占时间</title>
    <link href="http://feelerice.github.io/2021/10/26/636-%E5%87%BD%E6%95%B0%E7%9A%84%E7%8B%AC%E5%8D%A0%E6%97%B6%E9%97%B4/"/>
    <id>http://feelerice.github.io/2021/10/26/636-%E5%87%BD%E6%95%B0%E7%9A%84%E7%8B%AC%E5%8D%A0%E6%97%B6%E9%97%B4/</id>
    <published>2021-10-26T07:59:10.000Z</published>
    <updated>2021-10-26T08:33:15.005Z</updated>
    
    <content type="html"><![CDATA[<h1 id="636-函数的独占时间"><a href="#636-函数的独占时间" class="headerlink" title="636.函数的独占时间"></a>636.函数的独占时间</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>有一个 单线程 CPU 正在运行一个含有 n 道函数的程序。每道函数都有一个位于  0 和 n-1 之间的唯一标识符。</p><p>函数调用 存储在一个 调用栈 上 ：当一个函数调用开始时，它的标识符将会推入栈中。而当一个函数调用结束时，它的标识符将会从栈中弹出。标识符位于栈顶的函数是 当前正在执行的函数 。每当一个函数开始或者结束时，将会记录一条日志，包括函数标识符、是开始还是结束、以及相应的时间戳。</p><p>给你一个由日志组成的列表 logs ，其中 logs[i] 表示第 i 条日志消息，该消息是一个按 “{function_id}:{“start” | “end”}:{timestamp}” 进行格式化的字符串。例如，”0:start:3” 意味着标识符为 0 的函数调用在时间戳 3 的 起始开始执行 ；而 “1: end:2” 意味着标识符为 1 的函数调用在时间戳 2 的 末尾结束执行。注意，函数可以 调用多次，可能存在递归调用 。</p><p>函数的 独占时间 定义是在这个函数在程序所有函数调用中执行时间的总和，调用其他函数花费的时间不算该函数的独占时间。例如，如果一个函数被调用两次，一次调用执行 2 单位时间，另一次调用执行 1 单位时间，那么该函数的 独占时间 为 2 + 1 = 3 。</p><p>以数组形式返回每个函数的 独占时间 ，其中第 i 个下标对应的值表示标识符 i 的函数的独占时间。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>示例 1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 2, logs = [&quot;0:start:0&quot;,&quot;1:start:2&quot;,&quot;1:end:5&quot;,&quot;0:end:6&quot;]</span><br><span class="line">输出：[3,4]</span><br><span class="line">解释：</span><br><span class="line">函数 0 在时间戳 0 的起始开始执行，执行 2 个单位时间，于时间戳 1 的末尾结束执行。 </span><br><span class="line">函数 1 在时间戳 2 的起始开始执行，执行 4 个单位时间，于时间戳 5 的末尾结束执行。 </span><br><span class="line">函数 0 在时间戳 6 的开始恢复执行，执行 1 个单位时间。 </span><br><span class="line">所以函数 0 总共执行 2 + 1 = 3 个单位时间，函数 1 总共执行 4 个单位时间。 </span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 1, logs = [&quot;0:start:0&quot;,&quot;0:start:2&quot;,&quot;0:end:5&quot;,&quot;0:start:6&quot;,&quot;0:end:6&quot;,&quot;0:end:7&quot;]</span><br><span class="line">输出：[8]</span><br><span class="line">解释：</span><br><span class="line">函数 0 在时间戳 0 的起始开始执行，执行 2 个单位时间，并递归调用它自身。</span><br><span class="line">函数 0（递归调用）在时间戳 2 的起始开始执行，执行 4 个单位时间。</span><br><span class="line">函数 0（初始调用）恢复执行，并立刻再次调用它自身。</span><br><span class="line">函数 0（第二次递归调用）在时间戳 6 的起始开始执行，执行 1 个单位时间。</span><br><span class="line">函数 0（初始调用）在时间戳 7 的起始恢复执行，执行 1 个单位时间。</span><br><span class="line">所以函数 0 总共执行 2 + 4 + 1 + 1 = 8 个单位时间。</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 2, logs = [&quot;0:start:0&quot;,&quot;0:start:2&quot;,&quot;0:end:5&quot;,&quot;1:start:6&quot;,&quot;1:end:6&quot;,&quot;0:end:7&quot;]</span><br><span class="line">输出：[7,1]</span><br><span class="line">解释：</span><br><span class="line">函数 0 在时间戳 0 的起始开始执行，执行 2 个单位时间，并递归调用它自身。</span><br><span class="line">函数 0（递归调用）在时间戳 2 的起始开始执行，执行 4 个单位时间。</span><br><span class="line">函数 0（初始调用）恢复执行，并立刻调用函数 1 。</span><br><span class="line">函数 1在时间戳 6 的起始开始执行，执行 1 个单位时间，于时间戳 6 的末尾结束执行。</span><br><span class="line">函数 0（初始调用）在时间戳 7 的起始恢复执行，执行 1 个单位时间，于时间戳 7 的末尾结束执行。</span><br><span class="line">所以函数 0 总共执行 2 + 4 + 1 = 7 个单位时间，函数 1 总共执行 1 个单位时间。 </span><br></pre></td></tr></table></figure><p>示例 4：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 2, logs = [&quot;0:start:0&quot;,&quot;0:start:2&quot;,&quot;0:end:5&quot;,&quot;1:start:7&quot;,&quot;1:end:7&quot;,&quot;0:end:8&quot;]</span><br><span class="line">输出：[8,1]</span><br></pre></td></tr></table></figure><p>示例 5：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：n = 1, logs = [&quot;0:start:0&quot;,&quot;0:end:0&quot;]</span><br><span class="line">输出：[1]</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><ul><li>1 &lt;= n &lt;= 100</li><li>1 &lt;= logs.length &lt;= 500</li><li>0 &lt;= function_id &lt; n</li><li>0 &lt;= timestamp &lt;= 109</li><li>两个开始事件不会在同一时间戳发生</li><li>两个结束事件不会在同一时间戳发生</li><li>每道函数都有一个对应 “start” 日志的 “end” 日志</li></ul><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>我们使用栈的数据结构来进行解答，每一次<code>start</code>对应其入栈，每一次<code>end</code>对应其出栈。在出栈的同时我们应该填写<strong>结果数组</strong>对应的答案。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">int</span>[] exclusiveTime(<span class="keyword">int</span> n, List&lt;String&gt; logs) &#123;</span><br><span class="line">    <span class="keyword">int</span>[] ans = <span class="keyword">new</span> <span class="keyword">int</span>[n];</span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    String[] s = logs.get(<span class="number">0</span>).split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">    stack.push(Integer.valueOf(s[<span class="number">0</span>]));</span><br><span class="line">    <span class="keyword">int</span> pre = Integer.valueOf(s[<span class="number">2</span>]);</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; logs.size(); i++) &#123;</span><br><span class="line">        s = logs.get(i).split(<span class="string">&quot;:&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (s[<span class="number">1</span>].contains(<span class="string">&quot;start&quot;</span>)) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!stack.isEmpty()) &#123;</span><br><span class="line">                ans[stack.peek()] += Integer.valueOf(s[<span class="number">2</span>]) - pre;</span><br><span class="line">            &#125;</span><br><span class="line">            pre = Integer.valueOf(s[<span class="number">2</span>]);</span><br><span class="line">            stack.push(Integer.valueOf(s[<span class="number">0</span>]));</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            ans[stack.pop()] += Integer.valueOf(s[<span class="number">2</span>]) - pre + <span class="number">1</span>;</span><br><span class="line">            pre = Integer.valueOf(s[<span class="number">2</span>]) + <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;636-函数的独占时间&quot;&gt;&lt;a href=&quot;#636-函数的独占时间&quot; class=&quot;headerlink&quot; title=&quot;636.函数的独占时间&quot;&gt;&lt;/a&gt;636.函数的独占时间&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;head</summary>
      
    
    
    
    <category term="算法" scheme="http://feelerice.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/categories/LeetCode/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/LeetCode/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="栈与递归" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/%E6%A0%88%E4%B8%8E%E9%80%92%E5%BD%92/"/>
    
    <category term="栈与递归" scheme="http://feelerice.github.io/categories/%E6%A0%88%E4%B8%8E%E9%80%92%E5%BD%92/"/>
    
    <category term="栈与计算器" scheme="http://feelerice.github.io/categories/%E6%A0%88%E4%B8%8E%E9%80%92%E5%BD%92/%E6%A0%88%E4%B8%8E%E8%AE%A1%E7%AE%97%E5%99%A8/"/>
    
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/tags/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/tags/LeetCode/"/>
    
    <category term="栈与递归" scheme="http://feelerice.github.io/tags/%E6%A0%88%E4%B8%8E%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>20.有效的括号</title>
    <link href="http://feelerice.github.io/2021/10/26/20-%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/"/>
    <id>http://feelerice.github.io/2021/10/26/20-%E6%9C%89%E6%95%88%E7%9A%84%E6%8B%AC%E5%8F%B7/</id>
    <published>2021-10-26T07:36:22.000Z</published>
    <updated>2021-10-26T07:49:58.069Z</updated>
    
    <content type="html"><![CDATA[<h1 id="20-有效的括号"><a href="#20-有效的括号" class="headerlink" title="20.有效的括号"></a>20.有效的括号</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给定一个只包括 ‘(‘，’)’，’{‘，’}’，’[‘，’]’ 的字符串 s ，判断字符串是否有效。</p><p>有效字符串需满足：</p><ol><li>左括号必须用相同类型的右括号闭合。</li><li>左括号必须以正确的顺序闭合。</li></ol><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>示例 1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;()&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;()[]&#123;&#125;&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;(]&quot;</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><p>示例 4：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;([)]&quot;</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><p>示例 5：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;&#123;[]&#125;&quot;</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><ul><li><code>1 &lt;= s.length &lt;= 104</code></li><li><code>s</code> 仅由括号 <code>&#39;()[]&#123;&#125;&#39;</code> 组成</li></ul><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>我们使用一个map来存放每一个右括号所对应的左括号。在使用一个栈存放字符串中的左括号，每当遍历到一个有括号的时候就从map中获取其对应的左括号，然后与栈顶的元素对比如果不匹配则返回<code>false</code>。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Map&lt;Character, Character&gt; map = <span class="keyword">new</span> HashMap() &#123;&#123;</span><br><span class="line">    put(<span class="string">&#x27;)&#x27;</span>, <span class="string">&#x27;(&#x27;</span>);</span><br><span class="line">    put(<span class="string">&#x27;]&#x27;</span>, <span class="string">&#x27;[&#x27;</span>);</span><br><span class="line">    put(<span class="string">&#x27;&#125;&#x27;</span>, <span class="string">&#x27;&#123;&#x27;</span>);</span><br><span class="line">&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">isValid</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    Stack&lt;Character&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="keyword">char</span>[] chars = s.toCharArray();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> ch : chars) &#123;</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((stack.isEmpty() || map.get(ch) != stack.pop()))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;]&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((stack.isEmpty() || map.get(ch) != stack.pop()))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;&#125;&#x27;</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> ((stack.isEmpty() || map.get(ch) != stack.pop()))</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            stack.push(ch);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack.isEmpty();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;20-有效的括号&quot;&gt;&lt;a href=&quot;#20-有效的括号&quot; class=&quot;headerlink&quot; title=&quot;20.有效的括号&quot;&gt;&lt;/a&gt;20.有效的括号&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="算法" scheme="http://feelerice.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/categories/LeetCode/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/LeetCode/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="栈与递归" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/%E6%A0%88%E4%B8%8E%E9%80%92%E5%BD%92/"/>
    
    <category term="栈与递归" scheme="http://feelerice.github.io/categories/%E6%A0%88%E4%B8%8E%E9%80%92%E5%BD%92/"/>
    
    <category term="栈与计算器" scheme="http://feelerice.github.io/categories/%E6%A0%88%E4%B8%8E%E9%80%92%E5%BD%92/%E6%A0%88%E4%B8%8E%E8%AE%A1%E7%AE%97%E5%99%A8/"/>
    
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/tags/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/tags/LeetCode/"/>
    
    <category term="栈与递归" scheme="http://feelerice.github.io/tags/%E6%A0%88%E4%B8%8E%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>227.基本计算器II</title>
    <link href="http://feelerice.github.io/2021/10/26/227-%E5%9F%BA%E6%9C%AC%E8%AE%A1%E7%AE%97%E5%99%A8II/"/>
    <id>http://feelerice.github.io/2021/10/26/227-%E5%9F%BA%E6%9C%AC%E8%AE%A1%E7%AE%97%E5%99%A8II/</id>
    <published>2021-10-26T06:25:33.000Z</published>
    <updated>2021-10-26T06:40:12.819Z</updated>
    
    <content type="html"><![CDATA[<h1 id="227-基本计算器II"><a href="#227-基本计算器II" class="headerlink" title="227.基本计算器II"></a>227.基本计算器II</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给你一个字符串表达式 <code>s</code> ，请你实现一个基本计算器来计算并返回它的值。</p><p>整数除法仅保留整数部分。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>示例 1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;3+2*2&quot;</span><br><span class="line">输出：7</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot; 3/2 &quot;</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot; 3+5 / 2 &quot;</span><br><span class="line">输出：5</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><ul><li>1 &lt;= s.length &lt;= 3 * 105</li><li>s 由整数和算符 (‘+’, ‘-‘, ‘*’, ‘/‘) 组成，中间由一些空格隔开</li><li>s 表示一个 有效表达式</li><li>表达式中的所有整数都是非负整数，且在范围 [0, 231 - 1] 内</li><li>题目数据保证答案是一个 32-bit 整数</li></ul><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>解法和<code>224.基本计算器</code>一样，只不过这里的运算符增加了<code>* , /</code>两种。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap() &#123;&#123;</span><br><span class="line">    put(<span class="string">&#x27;+&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">    put(<span class="string">&#x27;-&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">    put(<span class="string">&#x27;*&#x27;</span>, <span class="number">2</span>);</span><br><span class="line">    put(<span class="string">&#x27;/&#x27;</span>, <span class="number">2</span>);</span><br><span class="line">&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    Stack&lt;Integer&gt; nums = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    Stack&lt;Character&gt; ops = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    String replaceAll = s.replaceAll(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">char</span>[] array = replaceAll.toCharArray();</span><br><span class="line">    <span class="keyword">if</span> (!Character.isDigit(array[<span class="number">0</span>])) nums.push(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">        <span class="keyword">char</span> ch = array[i];</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">            ops.push(ch);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">//计算括号内所有的式子</span></span><br><span class="line">            <span class="keyword">while</span> (!ops.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ops.peek() != <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                    cal(nums, ops);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    ops.pop();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (Character.isDigit(ch)) &#123;</span><br><span class="line">                <span class="keyword">int</span> num = <span class="number">0</span>, j = i;</span><br><span class="line">                <span class="keyword">while</span> (j &lt; array.length &amp;&amp; Character.isDigit(array[j])) &#123;</span><br><span class="line">                    num = num * <span class="number">10</span> + array[j] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                    j++;</span><br><span class="line">                &#125;</span><br><span class="line">                i = j - <span class="number">1</span>;</span><br><span class="line">                nums.push(num);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//运算符</span></span><br><span class="line">                <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; array[i - <span class="number">1</span>] == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                    nums.push(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="keyword">while</span> (!ops.isEmpty()) &#123;</span><br><span class="line">                    <span class="keyword">char</span> pre = ops.peek();</span><br><span class="line">                    <span class="keyword">if</span> (map.get(pre) &gt;= map.get(ch)) &#123;</span><br><span class="line">                        cal(nums, ops);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                ops.push(ch);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (!ops.isEmpty()) cal(nums, ops);</span><br><span class="line">    <span class="keyword">return</span> nums.pop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">cal</span><span class="params">(Stack&lt;Integer&gt; nums, Stack&lt;Character&gt; ops)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> right = nums.pop();</span><br><span class="line">    <span class="keyword">int</span> left = nums.pop();</span><br><span class="line">    <span class="keyword">char</span> operation = ops.pop();</span><br><span class="line">    <span class="keyword">if</span> (operation == <span class="string">&#x27;+&#x27;</span>) &#123;</span><br><span class="line">        nums.push(left + right);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (operation == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">        nums.push(left - right);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (operation == <span class="string">&#x27;*&#x27;</span>) &#123;</span><br><span class="line">        nums.push(left * right);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (operation == <span class="string">&#x27;/&#x27;</span>) &#123;</span><br><span class="line">        nums.push(left / right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;227-基本计算器II&quot;&gt;&lt;a href=&quot;#227-基本计算器II&quot; class=&quot;headerlink&quot; title=&quot;227.基本计算器II&quot;&gt;&lt;/a&gt;227.基本计算器II&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;head</summary>
      
    
    
    
    <category term="算法" scheme="http://feelerice.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/categories/LeetCode/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/LeetCode/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="栈与递归" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/%E6%A0%88%E4%B8%8E%E9%80%92%E5%BD%92/"/>
    
    <category term="栈与递归" scheme="http://feelerice.github.io/categories/%E6%A0%88%E4%B8%8E%E9%80%92%E5%BD%92/"/>
    
    <category term="栈与计算器" scheme="http://feelerice.github.io/categories/%E6%A0%88%E4%B8%8E%E9%80%92%E5%BD%92/%E6%A0%88%E4%B8%8E%E8%AE%A1%E7%AE%97%E5%99%A8/"/>
    
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/tags/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/tags/LeetCode/"/>
    
    <category term="栈与递归" scheme="http://feelerice.github.io/tags/%E6%A0%88%E4%B8%8E%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>224.基本计算器</title>
    <link href="http://feelerice.github.io/2021/10/26/224-%E5%9F%BA%E6%9C%AC%E8%AE%A1%E7%AE%97%E5%99%A8/"/>
    <id>http://feelerice.github.io/2021/10/26/224-%E5%9F%BA%E6%9C%AC%E8%AE%A1%E7%AE%97%E5%99%A8/</id>
    <published>2021-10-26T05:24:29.000Z</published>
    <updated>2021-10-26T06:24:29.764Z</updated>
    
    <content type="html"><![CDATA[<h1 id="224-基本计算器"><a href="#224-基本计算器" class="headerlink" title="224.基本计算器"></a>224.基本计算器</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给你一个字符串表达式 <code>s</code> ，请你实现一个基本计算器来计算并返回它的值。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>示例 1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;1 + 1&quot;</span><br><span class="line">输出：2</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot; 2-1 + 2 &quot;</span><br><span class="line">输出：3</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：s = &quot;(1+(4+5+2)-3)+(6+8)&quot;</span><br><span class="line">输出：23</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><ul><li><code>1 &lt;= s.length &lt;= 3 * 105</code></li><li><code>s</code> 由数字、<code>&#39;+&#39;</code>、<code>&#39;-&#39;</code>、<code>&#39;(&#39;</code>、<code>&#39;)&#39;</code>、和 <code>&#39; &#39;</code> 组成</li><li><code>s</code> 表示一个有效的表达式</li></ul><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p><strong>通解</strong></p><p>对于一个表达式，我们永远都是考虑不同运算符的优先级。其中括号<code>()</code>的优先级毫无疑问是最高的。</p><p>我们使用两个栈来进行对表达式的扫描结果进行缓存：</p><ul><li><code>nums</code>：缓存数字</li><li><code>ops</code>：缓存所有的操作符</li></ul><p>对于当前扫描到的字符存在两种可能性，数字或者运算符。</p><ul><li>如果当前扫描到的字符是数字，那么将所有的数字获取到并存放到<code>nums</code>栈中</li><li>如果当前扫描到的字符是操作符，那么取出上一次获取到的操作符，如果上一次运算符。</li></ul><p><strong>细节：</strong>对于<code>- 1 + 1</code>这种表达式也是成立的，所以我们应该在表达式第一位不是数字的前方加上一个0，使其变成<code>0 - 1 + 1</code>，并且对于一个括号内的计算式可以看成另一个子表达式。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> Map&lt;Character, Integer&gt; map = <span class="keyword">new</span> HashMap() &#123;&#123;</span><br><span class="line">    put(<span class="string">&#x27;+&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">    put(<span class="string">&#x27;-&#x27;</span>, <span class="number">1</span>);</span><br><span class="line">&#125;&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calculate</span><span class="params">(String s)</span> </span>&#123;</span><br><span class="line">    Stack&lt;Integer&gt; nums = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    Stack&lt;Character&gt; ops = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    String str = s.replaceAll(<span class="string">&quot; &quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">char</span>[] array = str.toCharArray();</span><br><span class="line">    <span class="keyword">if</span> (!Character.isDigit(array[<span class="number">0</span>])) nums.push(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">        <span class="keyword">char</span> ch = array[i];</span><br><span class="line">        <span class="keyword">if</span> (ch == <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">            ops.push(ch);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;)&#x27;</span>) &#123;</span><br><span class="line">            <span class="comment">//需要计算括号中的数据</span></span><br><span class="line">            <span class="keyword">while</span> (!ops.isEmpty()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (ops.peek() != <span class="string">&#x27;(&#x27;</span>) &#123;</span><br><span class="line">                    cal(nums, ops);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    ops.pop();</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (Character.isDigit(ch)) &#123;</span><br><span class="line">                <span class="keyword">int</span> num = <span class="number">0</span>, j = i;</span><br><span class="line">                <span class="keyword">while</span> (j &lt; array.length &amp;&amp; Character.isDigit(array[j])) &#123;</span><br><span class="line">                    num = num * <span class="number">10</span> + array[j] - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                    j++;</span><br><span class="line">                &#125;</span><br><span class="line">                nums.push(num);</span><br><span class="line">                i = j - <span class="number">1</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="comment">//当前是运算符，需要判断前一个字符是不是左括号</span></span><br><span class="line">                <span class="keyword">if</span> (i &gt; <span class="number">0</span> &amp;&amp; (array[i - <span class="number">1</span>] == <span class="string">&#x27;(&#x27;</span>))&#123;</span><br><span class="line">                    nums.push(<span class="number">0</span>);</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//当前字符是运算符，比较运算符的优先级顺序</span></span><br><span class="line">                <span class="keyword">while</span> (!ops.isEmpty() &amp;&amp; ops.peek() != <span class="string">&#x27;(&#x27;</span>)&#123;</span><br><span class="line">                    <span class="keyword">char</span> pre = ops.peek();</span><br><span class="line">                    <span class="keyword">if</span> (map.get(pre) &gt;= map.get(ch))&#123;</span><br><span class="line">                        cal(nums,ops);</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                ops.push(ch);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//计算剩余的</span></span><br><span class="line">    <span class="keyword">while</span> (!ops.isEmpty())cal(nums,ops);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> nums.pop();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">cal</span><span class="params">(Stack&lt;Integer&gt; nums, Stack&lt;Character&gt; ops)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> right = nums.pop();</span><br><span class="line">    <span class="keyword">int</span> left = nums.pop();</span><br><span class="line">    <span class="keyword">char</span> operation = ops.pop();</span><br><span class="line">    <span class="keyword">if</span> (operation == <span class="string">&#x27;+&#x27;</span>) &#123;</span><br><span class="line">        nums.push(left + right);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (operation == <span class="string">&#x27;-&#x27;</span>) &#123;</span><br><span class="line">        nums.push(left - right);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;224-基本计算器&quot;&gt;&lt;a href=&quot;#224-基本计算器&quot; class=&quot;headerlink&quot; title=&quot;224.基本计算器&quot;&gt;&lt;/a&gt;224.基本计算器&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; </summary>
      
    
    
    
    <category term="算法" scheme="http://feelerice.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/categories/LeetCode/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/LeetCode/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="栈与递归" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/%E6%A0%88%E4%B8%8E%E9%80%92%E5%BD%92/"/>
    
    <category term="栈与递归" scheme="http://feelerice.github.io/categories/%E6%A0%88%E4%B8%8E%E9%80%92%E5%BD%92/"/>
    
    <category term="栈与计算器" scheme="http://feelerice.github.io/categories/%E6%A0%88%E4%B8%8E%E9%80%92%E5%BD%92/%E6%A0%88%E4%B8%8E%E8%AE%A1%E7%AE%97%E5%99%A8/"/>
    
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/tags/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/tags/LeetCode/"/>
    
    <category term="栈与递归" scheme="http://feelerice.github.io/tags/%E6%A0%88%E4%B8%8E%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>150.逆波兰表达式求值</title>
    <link href="http://feelerice.github.io/2021/10/26/150-%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/"/>
    <id>http://feelerice.github.io/2021/10/26/150-%E9%80%86%E6%B3%A2%E5%85%B0%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC/</id>
    <published>2021-10-26T03:13:16.000Z</published>
    <updated>2021-10-26T03:25:48.425Z</updated>
    
    <content type="html"><![CDATA[<h1 id="150-逆波兰表达式求值"><a href="#150-逆波兰表达式求值" class="headerlink" title="150.逆波兰表达式求值"></a>150.逆波兰表达式求值</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>根据 逆波兰表示法，求表达式的值。</p><p>有效的算符包括 +、-、*、/ 。每个运算对象可以是整数，也可以是另一个逆波兰表达式。</p><p><strong>说明：</strong></p><ul><li>整数除法只保留整数部分。</li><li>给定逆波兰表达式总是有效的。换句话说，表达式总会得出有效数值且不存在除数为 0 的情况。</li></ul><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>示例 1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：tokens = [&quot;2&quot;,&quot;1&quot;,&quot;+&quot;,&quot;3&quot;,&quot;*&quot;]</span><br><span class="line">输出：9</span><br><span class="line">解释：该算式转化为常见的中缀算术表达式为：((2 + 1) * 3) = 9</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：tokens = [&quot;4&quot;,&quot;13&quot;,&quot;5&quot;,&quot;/&quot;,&quot;+&quot;]</span><br><span class="line">输出：6</span><br><span class="line">解释：该算式转化为常见的中缀算术表达式为：(4 + (13 / 5)) = 6</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">输入：tokens = [&quot;10&quot;,&quot;6&quot;,&quot;9&quot;,&quot;3&quot;,&quot;+&quot;,&quot;-11&quot;,&quot;*&quot;,&quot;/&quot;,&quot;*&quot;,&quot;17&quot;,&quot;+&quot;,&quot;5&quot;,&quot;+&quot;]</span><br><span class="line">输出：22</span><br><span class="line">解释：</span><br><span class="line">该算式转化为常见的中缀算术表达式为：</span><br><span class="line">  ((10 * (6 / ((9 + 3) * -11))) + 17) + 5</span><br><span class="line">= ((10 * (6 / (12 * -11))) + 17) + 5</span><br><span class="line">= ((10 * (6 / -132)) + 17) + 5</span><br><span class="line">= ((10 * 0) + 17) + 5</span><br><span class="line">= (0 + 17) + 5</span><br><span class="line">= 17 + 5</span><br><span class="line">= 22</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><ul><li>1 &lt;= tokens.length &lt;= 104</li><li>tokens[i] 要么是一个算符（”+”、”-“、”*” 或 “/“），要么是一个在范围 [-200, 200] 内的整数</li></ul><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>使用栈来进行解决。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">evalRPN</span><span class="params">(String[] tokens)</span> </span>&#123;</span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="keyword">for</span> (String token : tokens) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;+&quot;</span>.equals(token))&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = stack.pop() + stack.pop();</span><br><span class="line">            stack.push(temp);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;-&quot;</span>.equals(token))&#123;</span><br><span class="line">            <span class="keyword">int</span> right = stack.pop();</span><br><span class="line">            <span class="keyword">int</span> left = stack.pop();</span><br><span class="line">            stack.push(left - right);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;*&quot;</span>.equals(token))&#123;</span><br><span class="line">            <span class="keyword">int</span> temp = stack.pop() * stack.pop();</span><br><span class="line">            stack.push(temp);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;/&quot;</span>.equals(token))&#123;</span><br><span class="line">            <span class="keyword">int</span> right = stack.pop();</span><br><span class="line">            <span class="keyword">int</span> left = stack.pop();</span><br><span class="line">            stack.push(left / right);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            stack.push(Integer.valueOf(token));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> stack.pop();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;150-逆波兰表达式求值&quot;&gt;&lt;a href=&quot;#150-逆波兰表达式求值&quot; class=&quot;headerlink&quot; title=&quot;150.逆波兰表达式求值&quot;&gt;&lt;/a&gt;150.逆波兰表达式求值&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;</summary>
      
    
    
    
    <category term="算法" scheme="http://feelerice.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/categories/LeetCode/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/LeetCode/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="栈与递归" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/%E6%A0%88%E4%B8%8E%E9%80%92%E5%BD%92/"/>
    
    <category term="栈与递归" scheme="http://feelerice.github.io/categories/%E6%A0%88%E4%B8%8E%E9%80%92%E5%BD%92/"/>
    
    <category term="栈与计算器" scheme="http://feelerice.github.io/categories/%E6%A0%88%E4%B8%8E%E9%80%92%E5%BD%92/%E6%A0%88%E4%B8%8E%E8%AE%A1%E7%AE%97%E5%99%A8/"/>
    
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/tags/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/tags/LeetCode/"/>
    
    <category term="栈与递归" scheme="http://feelerice.github.io/tags/%E6%A0%88%E4%B8%8E%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>388.文件的最长绝对路径</title>
    <link href="http://feelerice.github.io/2021/10/25/388-%E6%96%87%E4%BB%B6%E7%9A%84%E6%9C%80%E9%95%BF%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84/"/>
    <id>http://feelerice.github.io/2021/10/25/388-%E6%96%87%E4%BB%B6%E7%9A%84%E6%9C%80%E9%95%BF%E7%BB%9D%E5%AF%B9%E8%B7%AF%E5%BE%84/</id>
    <published>2021-10-25T08:57:45.000Z</published>
    <updated>2021-10-25T09:07:58.054Z</updated>
    
    <content type="html"><![CDATA[<h1 id="388-文件的最长绝对路径"><a href="#388-文件的最长绝对路径" class="headerlink" title="388.文件的最长绝对路径"></a>388.文件的最长绝对路径</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>这里将 dir 作为根目录中的唯一目录。dir 包含两个子目录 subdir1 和 subdir2 。subdir1 包含文件 file1.ext 和子目录 subsubdir1；subdir2 包含子目录 subsubdir2，该子目录下包含文件 file2.ext 。</p><p>在文本格式中，如下所示(⟶表示制表符)：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">dir</span><br><span class="line">⟶ subdir1</span><br><span class="line">⟶ ⟶ file1.ext</span><br><span class="line">⟶ ⟶ subsubdir1</span><br><span class="line">⟶ subdir2</span><br><span class="line">⟶ ⟶ subsubdir2</span><br><span class="line">⟶ ⟶ ⟶ file2.ext</span><br></pre></td></tr></table></figure><p>如果是代码表示，上面的文件系统可以写为 “dir\n\tsubdir1\n\t\tfile1.ext\n\t\tsubsubdir1\n\tsubdir2\n\t\tsubsubdir2\n\t\t\tfile2.ext” 。’\n’ 和 ‘\t’ 分别是换行符和制表符。</p><p>文件系统中的每个文件和文件夹都有一个唯一的 绝对路径 ，即必须打开才能到达文件/目录所在位置的目录顺序，所有路径用 ‘/‘ 连接。上面例子中，指向 file2.ext 的绝对路径是 “dir/subdir2/subsubdir2/file2.ext” 。每个目录名由字母、数字和/或空格组成，每个文件名遵循 name.extension 的格式，其中名称和扩展名由字母、数字和/或空格组成。</p><p>给定一个以上述格式表示文件系统的字符串 input ，返回文件系统中 指向文件的最长绝对路径 的长度。 如果系统中没有文件，返回 0。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>示例 1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：input = &quot;dir\n\tsubdir1\n\tsubdir2\n\t\tfile.ext&quot;</span><br><span class="line">输出：20</span><br><span class="line">解释：只有一个文件，绝对路径为 &quot;dir/subdir2/file.ext&quot; ，路径长度 20</span><br><span class="line">路径 &quot;dir/subdir1&quot; 不含任何文件</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">输入：input = &quot;dir\n\tsubdir1\n\t\tfile1.ext\n\t\tsubsubdir1\n\tsubdir2\n\t\tsubsubdir2\n\t\t\tfile2.ext&quot;</span><br><span class="line">输出：32</span><br><span class="line">解释：存在两个文件：</span><br><span class="line">&quot;dir/subdir1/file1.ext&quot; ，路径长度 21</span><br><span class="line">&quot;dir/subdir2/subsubdir2/file2.ext&quot; ，路径长度 32</span><br><span class="line">返回 32 ，因为这是最长的路径</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：input = &quot;a&quot;</span><br><span class="line">输出：0</span><br><span class="line">解释：不存在任何文件</span><br></pre></td></tr></table></figure><p>示例 4：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：input = &quot;file1.txt\nfile2.txt\nlongfile.txt&quot;</span><br><span class="line">输出：12</span><br><span class="line">解释：根目录下有 3 个文件。</span><br><span class="line">因为根目录中任何东西的绝对路径只是名称本身，所以答案是 &quot;longfile.txt&quot; ，路径长度为 12</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><ul><li>1 &lt;= input.length &lt;= 104</li><li>input 可能包含小写或大写的英文字母，一个换行符 ‘\n’，一个指表符 ‘\t’，一个点 ‘.’，一个空格 ‘ ‘，和数字。</li></ul><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>我们可以使用广度搜索，遍历每一个文件，找到当前的最大值返回，并且使用栈的数据结构来保存上级目录的长度。</p><ol><li>首先将字符串使用<code>split</code>函数以<code>\n</code>进行分给</li><li>遍历每一个字符串，并且以<code>\t</code>判断当前的层级</li><li>如果栈的元素大小大于等于当前层级，那么需要一直弹栈到栈中元素小于当前层级。例如（当前层级为2，栈中元素为{1, 6,7}。显然我们并不需要<code>7</code>这是因为层级为2的之前允许有0层1层的元素）</li><li>计算到当前文件或目录的字符长度</li><li>判断当前是不是文件如果是文件，就进行最大值的判断。</li></ol><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">lengthLongestPath</span><span class="params">(String input)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    String[] strings = input.split(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">    <span class="keyword">for</span> (String s : strings) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">int</span> level = s.lastIndexOf(<span class="string">&quot;\t&quot;</span>) + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (level &lt; stack.size()) &#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">int</span> length = stack.empty() ? s.length() - level : stack.peek() + (s.length() - level + <span class="number">1</span>);</span><br><span class="line">            stack.push(length);</span><br><span class="line">            <span class="keyword">if</span> (s.contains(<span class="string">&quot;.&quot;</span>)) &#123;</span><br><span class="line">                ans = Math.max(length, ans);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;388-文件的最长绝对路径&quot;&gt;&lt;a href=&quot;#388-文件的最长绝对路径&quot; class=&quot;headerlink&quot; title=&quot;388.文件的最长绝对路径&quot;&gt;&lt;/a&gt;388.文件的最长绝对路径&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; cla</summary>
      
    
    
    
    <category term="算法" scheme="http://feelerice.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/categories/LeetCode/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/LeetCode/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="栈与递归" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/%E6%A0%88%E4%B8%8E%E9%80%92%E5%BD%92/"/>
    
    <category term="栈与递归" scheme="http://feelerice.github.io/categories/%E6%A0%88%E4%B8%8E%E9%80%92%E5%BD%92/"/>
    
    <category term="用栈访问最后若干元素" scheme="http://feelerice.github.io/categories/%E6%A0%88%E4%B8%8E%E9%80%92%E5%BD%92/%E7%94%A8%E6%A0%88%E8%AE%BF%E9%97%AE%E6%9C%80%E5%90%8E%E8%8B%A5%E5%B9%B2%E5%85%83%E7%B4%A0/"/>
    
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/tags/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/tags/LeetCode/"/>
    
    <category term="栈与递归" scheme="http://feelerice.github.io/tags/%E6%A0%88%E4%B8%8E%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>71.简化路径</title>
    <link href="http://feelerice.github.io/2021/10/25/71-%E7%AE%80%E5%8C%96%E8%B7%AF%E5%BE%84/"/>
    <id>http://feelerice.github.io/2021/10/25/71-%E7%AE%80%E5%8C%96%E8%B7%AF%E5%BE%84/</id>
    <published>2021-10-25T07:47:48.000Z</published>
    <updated>2021-10-25T08:12:54.408Z</updated>
    
    <content type="html"><![CDATA[<h1 id="71-简化路径"><a href="#71-简化路径" class="headerlink" title="71.简化路径"></a>71.简化路径</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给你一个字符串 path ，表示指向某一文件或目录的 Unix 风格 绝对路径 （以 ‘/‘ 开头），请你将其转化为更加简洁的规范路径。</p><p>在 Unix 风格的文件系统中，一个点（.）表示当前目录本身；此外，两个点 （..） 表示将目录切换到上一级（指向父目录）；两者都可以是复杂相对路径的组成部分。任意多个连续的斜杠（即，’//‘）都被视为单个斜杠 ‘/‘ 。 对于此问题，任何其他格式的点（例如，’…’）均被视为文件/目录名称。</p><p>请注意，返回的 规范路径 必须遵循下述格式：</p><ul><li>始终以斜杠 ‘/‘ 开头。</li><li>两个目录名之间必须只有一个斜杠 ‘/‘ 。</li><li>最后一个目录名（如果存在）不能 以 ‘/‘ 结尾。</li><li>此外，路径仅包含从根目录到目标文件或目录的路径上的目录（即，不含 ‘.’ 或 ‘..’）。</li></ul><p>返回简化后得到的 规范路径 。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>示例 1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：path = &quot;/home/&quot;</span><br><span class="line">输出：&quot;/home&quot;</span><br><span class="line">解释：注意，最后一个目录名后面没有斜杠。 </span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：path = &quot;/../&quot;</span><br><span class="line">输出：&quot;/&quot;</span><br><span class="line">解释：从根目录向上一级是不可行的，因为根目录是你可以到达的最高级。</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：path = &quot;/home//foo/&quot;</span><br><span class="line">输出：&quot;/home/foo&quot;</span><br><span class="line">解释：在规范路径中，多个连续斜杠需要用一个斜杠替换。</span><br></pre></td></tr></table></figure><p>示例 4：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：path = &quot;/a/./b/../../c/&quot;</span><br><span class="line">输出：&quot;/c&quot;</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><ul><li>1 &lt;= path.length &lt;= 3000</li><li>path 由英文字母，数字，’.’，’/‘ 或 ‘_’ 组成。</li><li>path 是一个有效的 Unix 风格绝对路径。</li></ul><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>使用“/”将字符串分割，对分割的字符串进行操作：</p><ul><li>如果当前<code>..</code>：且当前栈中存在元素进行弹栈，否则什么都不做</li><li>如果当前不是<code>.</code>：就将其加入栈中</li></ul><p>那么上述条件中当<code>&quot;.&quot;.equals(s)= true 和&quot;..&quot;.equals(s) &amp;&amp; stack.empty() = true</code>什么都不做。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">simplifyPath</span><span class="params">(String path)</span> </span>&#123;</span><br><span class="line">    Stack&lt;String&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">for</span> (String s : path.split(<span class="string">&quot;/&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s.length() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="string">&quot;..&quot;</span>.equals(s) &amp;&amp; !stack.empty()) &#123;</span><br><span class="line">                stack.pop();</span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!<span class="string">&quot;..&quot;</span>.contains(s)) &#123;</span><br><span class="line">                stack.push(s);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (String s : stack) &#123;</span><br><span class="line">        sb.append(<span class="string">&quot;/&quot;</span> + s);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sb.length() == <span class="number">0</span> ? <span class="string">&quot;/&quot;</span> : sb.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;71-简化路径&quot;&gt;&lt;a href=&quot;#71-简化路径&quot; class=&quot;headerlink&quot; title=&quot;71.简化路径&quot;&gt;&lt;/a&gt;71.简化路径&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问</summary>
      
    
    
    
    <category term="算法" scheme="http://feelerice.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/categories/LeetCode/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/LeetCode/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="栈与递归" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/%E6%A0%88%E4%B8%8E%E9%80%92%E5%BD%92/"/>
    
    <category term="栈与递归" scheme="http://feelerice.github.io/categories/%E6%A0%88%E4%B8%8E%E9%80%92%E5%BD%92/"/>
    
    <category term="用栈访问最后若干元素" scheme="http://feelerice.github.io/categories/%E6%A0%88%E4%B8%8E%E9%80%92%E5%BD%92/%E7%94%A8%E6%A0%88%E8%AE%BF%E9%97%AE%E6%9C%80%E5%90%8E%E8%8B%A5%E5%B9%B2%E5%85%83%E7%B4%A0/"/>
    
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/tags/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/tags/LeetCode/"/>
    
    <category term="栈与递归" scheme="http://feelerice.github.io/tags/%E6%A0%88%E4%B8%8E%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>682.棒球比赛</title>
    <link href="http://feelerice.github.io/2021/10/25/682-%E6%A3%92%E7%90%83%E6%AF%94%E8%B5%9B/"/>
    <id>http://feelerice.github.io/2021/10/25/682-%E6%A3%92%E7%90%83%E6%AF%94%E8%B5%9B/</id>
    <published>2021-10-25T01:31:48.000Z</published>
    <updated>2021-10-25T07:47:29.176Z</updated>
    
    <content type="html"><![CDATA[<h1 id="682-棒球比赛"><a href="#682-棒球比赛" class="headerlink" title="682.棒球比赛"></a>682.棒球比赛</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>你现在是一场采用特殊赛制棒球比赛的记录员。这场比赛由若干回合组成，过去几回合的得分可能会影响以后几回合的得分。</p><p>比赛开始时，记录是空白的。你会得到一个记录操作的字符串列表 ops，其中 ops[i] 是你需要记录的第 i 项操作，ops 遵循下述规则：</p><ol><li>整数 x - 表示本回合新获得分数 x</li><li>“+” - 表示本回合新获得的得分是前两次得分的总和。题目数据保证记录此操作时前面总是存在两个有效的分数。</li><li>“D” - 表示本回合新获得的得分是前一次得分的两倍。题目数据保证记录此操作时前面总是存在一个有效的分数。</li><li>“C” - 表示前一次得分无效，将其从记录中移除。题目数据保证记录此操作时前面总是存在一个有效的分数。</li></ol><p>请你返回记录中所有得分的总和。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>示例 1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">输入：ops = [&quot;5&quot;,&quot;2&quot;,&quot;C&quot;,&quot;D&quot;,&quot;+&quot;]</span><br><span class="line">输出：30</span><br><span class="line">解释：</span><br><span class="line">&quot;5&quot; - 记录加 5 ，记录现在是 [5]</span><br><span class="line">&quot;2&quot; - 记录加 2 ，记录现在是 [5, 2]</span><br><span class="line">&quot;C&quot; - 使前一次得分的记录无效并将其移除，记录现在是 [5].</span><br><span class="line">&quot;D&quot; - 记录加 2 * 5 = 10 ，记录现在是 [5, 10].</span><br><span class="line">&quot;+&quot; - 记录加 5 + 10 = 15 ，记录现在是 [5, 10, 15].</span><br><span class="line">所有得分的总和 5 + 10 + 15 = 30</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">输入：ops = [&quot;5&quot;,&quot;-2&quot;,&quot;4&quot;,&quot;C&quot;,&quot;D&quot;,&quot;9&quot;,&quot;+&quot;,&quot;+&quot;]</span><br><span class="line">输出：27</span><br><span class="line">解释：</span><br><span class="line">&quot;5&quot; - 记录加 5 ，记录现在是 [5]</span><br><span class="line">&quot;-2&quot; - 记录加 -2 ，记录现在是 [5, -2]</span><br><span class="line">&quot;4&quot; - 记录加 4 ，记录现在是 [5, -2, 4]</span><br><span class="line">&quot;C&quot; - 使前一次得分的记录无效并将其移除，记录现在是 [5, -2]</span><br><span class="line">&quot;D&quot; - 记录加 2 * -2 = -4 ，记录现在是 [5, -2, -4]</span><br><span class="line">&quot;9&quot; - 记录加 9 ，记录现在是 [5, -2, -4, 9]</span><br><span class="line">&quot;+&quot; - 记录加 -4 + 9 = 5 ，记录现在是 [5, -2, -4, 9, 5]</span><br><span class="line">&quot;+&quot; - 记录加 9 + 5 = 14 ，记录现在是 [5, -2, -4, 9, 5, 14]</span><br><span class="line">所有得分的总和 5 + -2 + -4 + 9 + 5 + 14 = 27</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：ops = [&quot;1&quot;]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><ul><li>1 &lt;= ops.length &lt;= 1000</li><li>ops[i] 为 “C”、”D”、”+”，或者一个表示整数的字符串。整数范围是 [-3 <em> 104, 3 </em> 104]</li><li>对于 “+” 操作，题目数据保证记录此操作时前面总是存在两个有效的分数</li><li>对于 “C” 和 “D” 操作，题目数据保证记录此操作时前面总是存在一个有效的分数</li></ul><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>直接使用栈的特性。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">calPoints</span><span class="params">(String[] ops)</span> </span>&#123;</span><br><span class="line">    Stack&lt;Integer&gt; stack = <span class="keyword">new</span> Stack&lt;&gt;();</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (String op : ops) &#123;</span><br><span class="line">        <span class="keyword">if</span> (<span class="string">&quot;C&quot;</span>.equals(op)) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = stack.pop();</span><br><span class="line">            sum -= temp;</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;D&quot;</span>.equals(op)) &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = stack.pop();</span><br><span class="line">            stack.push(temp);</span><br><span class="line">            sum += temp * <span class="number">2</span>;</span><br><span class="line">            stack.push(temp * <span class="number">2</span>);</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;+&quot;</span>.equals(op)) &#123;</span><br><span class="line">            <span class="keyword">int</span> pop1 = stack.pop();</span><br><span class="line">            <span class="keyword">int</span> pop2 = stack.pop();</span><br><span class="line">            <span class="keyword">int</span> temp = pop1 + pop2;</span><br><span class="line">            sum += temp;</span><br><span class="line">            stack.push(pop2);</span><br><span class="line">            stack.push(pop1);</span><br><span class="line">            stack.push(temp);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = <span class="number">0</span>, i = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">int</span> sign = op.charAt(<span class="number">0</span>) == <span class="string">&#x27;-&#x27;</span> ? -<span class="number">1</span> : <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">while</span> (i &lt; op.length()) &#123;</span><br><span class="line">                <span class="keyword">if</span> (op.charAt(i) &gt;= <span class="string">&#x27;0&#x27;</span> &amp;&amp; op.charAt(i) &lt;= <span class="string">&#x27;9&#x27;</span>)</span><br><span class="line">                    temp = temp * <span class="number">10</span> + op.charAt(i) - <span class="string">&#x27;0&#x27;</span>;</span><br><span class="line">                i++;</span><br><span class="line">            &#125;</span><br><span class="line">            stack.push(temp * sign);</span><br><span class="line">            sum += temp * sign;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;682-棒球比赛&quot;&gt;&lt;a href=&quot;#682-棒球比赛&quot; class=&quot;headerlink&quot; title=&quot;682.棒球比赛&quot;&gt;&lt;/a&gt;682.棒球比赛&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="算法" scheme="http://feelerice.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/categories/LeetCode/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/LeetCode/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="栈与递归" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/%E6%A0%88%E4%B8%8E%E9%80%92%E5%BD%92/"/>
    
    <category term="栈与递归" scheme="http://feelerice.github.io/categories/%E6%A0%88%E4%B8%8E%E9%80%92%E5%BD%92/"/>
    
    <category term="用栈访问最后若干元素" scheme="http://feelerice.github.io/categories/%E6%A0%88%E4%B8%8E%E9%80%92%E5%BD%92/%E7%94%A8%E6%A0%88%E8%AE%BF%E9%97%AE%E6%9C%80%E5%90%8E%E8%8B%A5%E5%B9%B2%E5%85%83%E7%B4%A0/"/>
    
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/tags/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/tags/LeetCode/"/>
    
    <category term="栈与递归" scheme="http://feelerice.github.io/tags/%E6%A0%88%E4%B8%8E%E9%80%92%E5%BD%92/"/>
    
  </entry>
  
  <entry>
    <title>507.完美数</title>
    <link href="http://feelerice.github.io/2021/10/23/507-%E5%AE%8C%E7%BE%8E%E6%95%B0/"/>
    <id>http://feelerice.github.io/2021/10/23/507-%E5%AE%8C%E7%BE%8E%E6%95%B0/</id>
    <published>2021-10-23T08:44:38.000Z</published>
    <updated>2021-10-23T08:51:22.794Z</updated>
    
    <content type="html"><![CDATA[<h1 id="507-完美数"><a href="#507-完美数" class="headerlink" title="507.完美数"></a>507.完美数</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>对于一个 正整数，如果它和除了它自身以外的所有 正因子 之和相等，我们称它为 「完美数」。</p><p>给定一个 整数 n， 如果是完美数，返回 true，否则返回 false</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>示例 1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入：28</span><br><span class="line">输出：True</span><br><span class="line">解释：28 = 1 + 2 + 4 + 7 + 14</span><br><span class="line">1, 2, 4, 7, 和 14 是 28 的所有正因子。</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：num = 6</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：num = 496</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p>示例 4：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：num = 8128</span><br><span class="line">输出：true</span><br></pre></td></tr></table></figure><p>示例 5：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：num = 2</span><br><span class="line">输出：false</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><ul><li><code>1 &lt;= num &lt;= 108</code></li></ul><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>暴力求解</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">checkPerfectNumber</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (num == <span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">    <span class="keyword">int</span> sum = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">2</span>; i * i &lt; num; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (num % i == <span class="number">0</span>)&#123;</span><br><span class="line">            sum += i;</span><br><span class="line">            <span class="keyword">if</span> (i * i != num) &#123;</span><br><span class="line">                sum += num / i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sum == num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;507-完美数&quot;&gt;&lt;a href=&quot;#507-完美数&quot; class=&quot;headerlink&quot; title=&quot;507.完美数&quot;&gt;&lt;/a&gt;507.完美数&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问</summary>
      
    
    
    
    <category term="算法" scheme="http://feelerice.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/categories/LeetCode/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/LeetCode/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="数与位" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/%E6%95%B0%E4%B8%8E%E4%BD%8D/"/>
    
    <category term="数与位" scheme="http://feelerice.github.io/categories/%E6%95%B0%E4%B8%8E%E4%BD%8D/"/>
    
    <category term="简单数学题" scheme="http://feelerice.github.io/categories/%E6%95%B0%E4%B8%8E%E4%BD%8D/%E7%AE%80%E5%8D%95%E6%95%B0%E5%AD%A6%E9%A2%98/"/>
    
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/tags/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/tags/LeetCode/"/>
    
    <category term="数与位" scheme="http://feelerice.github.io/tags/%E6%95%B0%E4%B8%8E%E4%BD%8D/"/>
    
  </entry>
  
  <entry>
    <title>29.两数相除</title>
    <link href="http://feelerice.github.io/2021/10/23/29-%E4%B8%A4%E6%95%B0%E7%9B%B8%E9%99%A4/"/>
    <id>http://feelerice.github.io/2021/10/23/29-%E4%B8%A4%E6%95%B0%E7%9B%B8%E9%99%A4/</id>
    <published>2021-10-23T08:17:29.000Z</published>
    <updated>2021-10-23T09:20:24.330Z</updated>
    
    <content type="html"><![CDATA[<h1 id="29-两数相除"><a href="#29-两数相除" class="headerlink" title="29.两数相除"></a>29.两数相除</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给定两个整数，被除数 dividend 和除数 divisor。将两数相除，要求不使用乘法、除法和 mod 运算符。</p><p>返回被除数 dividend 除以除数 divisor 得到的商。</p><p>整数除法的结果应当截去（truncate）其小数部分，例如：truncate(8.345) = 8 以及 truncate(-2.7335) = -2</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>示例 1:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: dividend = 10, divisor = 3</span><br><span class="line">输出: 3</span><br><span class="line">解释: 10/3 = truncate(3.33333..) = truncate(3) = 3</span><br></pre></td></tr></table></figure><p>示例 2:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: dividend = 7, divisor = -3</span><br><span class="line">输出: -2</span><br><span class="line">解释: 7/-3 = truncate(-2.33333..) = -2</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><ul><li>被除数和除数均为 32 位有符号整数。</li><li>除数不为 0。</li><li>假设我们的环境只能存储 32 位有符号整数，其数值范围是 [−2^31,  2^31 − 1]。本题中，如果除法结果溢出，则返回 231 − 1。</li></ul><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>除法在可以变成减法。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> dividend, <span class="keyword">int</span> divisor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dividend == Integer.MIN_VALUE) &#123;</span><br><span class="line">        <span class="keyword">if</span> (divisor == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.MIN_VALUE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (divisor == -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> Integer.MAX_VALUE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (divisor == Integer.MIN_VALUE)</span><br><span class="line">        <span class="keyword">return</span> dividend == Integer.MIN_VALUE ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> sign = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> ((dividend &gt; <span class="number">0</span> &amp;&amp; divisor &lt; <span class="number">0</span>) || (dividend &lt; <span class="number">0</span> &amp;&amp; divisor &gt; <span class="number">0</span>))</span><br><span class="line">        sign = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">long</span> a = Math.abs((<span class="keyword">long</span>)dividend);</span><br><span class="line">    <span class="keyword">long</span> b = Math.abs((<span class="keyword">long</span>)divisor);</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (a &gt;= b)&#123;</span><br><span class="line">        a -= b;</span><br><span class="line">        ans++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (ans &gt; Integer.MAX_VALUE || ans &lt;Integer.MIN_VALUE)</span><br><span class="line">        <span class="keyword">return</span> Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">return</span> ans * sign;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>超时</strong></p><h2 id="解法二"><a href="#解法二" class="headerlink" title="解法二"></a>解法二</h2><h3 id="思路-1"><a href="#思路-1" class="headerlink" title="思路"></a>思路</h3><p>我们在<code>解法一</code>中使用线性逼近其时间复杂度为<code>O(n)</code>，那么我们可以每次逼近前一次的两倍。</p><h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">divide</span><span class="params">(<span class="keyword">int</span> dividend, <span class="keyword">int</span> divisor)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (dividend == Integer.MIN_VALUE) &#123;</span><br><span class="line">        <span class="keyword">if</span> (divisor == <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.MIN_VALUE;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (divisor == -<span class="number">1</span>)</span><br><span class="line">            <span class="keyword">return</span> Integer.MAX_VALUE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (divisor == Integer.MIN_VALUE)</span><br><span class="line">        <span class="keyword">return</span> dividend == Integer.MIN_VALUE ? <span class="number">1</span> : <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> sign = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> ((dividend &gt; <span class="number">0</span> &amp;&amp; divisor &lt; <span class="number">0</span>) || (dividend &lt; <span class="number">0</span> &amp;&amp; divisor &gt; <span class="number">0</span>))</span><br><span class="line">        sign = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">long</span> a = Math.abs((<span class="keyword">long</span>) dividend);</span><br><span class="line">    <span class="keyword">long</span> b = Math.abs((<span class="keyword">long</span>) divisor);</span><br><span class="line">    <span class="keyword">int</span> ans = div(a, b);</span><br><span class="line">    <span class="keyword">if</span> (ans &gt; Integer.MAX_VALUE || ans &lt; Integer.MIN_VALUE)</span><br><span class="line">        <span class="keyword">return</span> Integer.MAX_VALUE;</span><br><span class="line">    <span class="keyword">return</span> ans * sign;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">div</span><span class="params">(<span class="keyword">long</span> a, <span class="keyword">long</span> b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (b &gt; a)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">long</span> count = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">long</span> tb = b;</span><br><span class="line">    <span class="keyword">while</span> ((tb + tb)  &lt; a)&#123;</span><br><span class="line">        count &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">        tb &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (<span class="keyword">int</span>) (count + div(a - tb, b));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;29-两数相除&quot;&gt;&lt;a href=&quot;#29-两数相除&quot; class=&quot;headerlink&quot; title=&quot;29.两数相除&quot;&gt;&lt;/a&gt;29.两数相除&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; title=&quot;问</summary>
      
    
    
    
    <category term="算法" scheme="http://feelerice.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/categories/LeetCode/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/LeetCode/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="数与位" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/%E6%95%B0%E4%B8%8E%E4%BD%8D/"/>
    
    <category term="数与位" scheme="http://feelerice.github.io/categories/%E6%95%B0%E4%B8%8E%E4%BD%8D/"/>
    
    <category term="简单数学题" scheme="http://feelerice.github.io/categories/%E6%95%B0%E4%B8%8E%E4%BD%8D/%E7%AE%80%E5%8D%95%E6%95%B0%E5%AD%A6%E9%A2%98/"/>
    
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/tags/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/tags/LeetCode/"/>
    
    <category term="数与位" scheme="http://feelerice.github.io/tags/%E6%95%B0%E4%B8%8E%E4%BD%8D/"/>
    
  </entry>
  
  <entry>
    <title>492.构造矩形</title>
    <link href="http://feelerice.github.io/2021/10/23/492-%E6%9E%84%E9%80%A0%E7%9F%A9%E5%BD%A2/"/>
    <id>http://feelerice.github.io/2021/10/23/492-%E6%9E%84%E9%80%A0%E7%9F%A9%E5%BD%A2/</id>
    <published>2021-10-23T07:30:45.000Z</published>
    <updated>2021-10-23T08:04:00.534Z</updated>
    
    <content type="html"><![CDATA[<h1 id="492-构造矩形"><a href="#492-构造矩形" class="headerlink" title="492.构造矩形"></a>492.构造矩形</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>作为一位web开发者， 懂得怎样去规划一个页面的尺寸是很重要的。 现给定一个具体的矩形页面面积，你的任务是设计一个长度为 L 和宽度为 W 且满足以下要求的矩形的页面。要求：</p><ol><li><p>你设计的矩形页面必须等于给定的目标面积。</p></li><li><p>宽度 W 不应大于长度 L，换言之，要求 L &gt;= W 。</p></li><li><p>长度 L 和宽度 W 之间的差距应当尽可能小。<br>你需要按顺序输出你设计的页面的长度 L 和宽度 W。</p></li></ol><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">输入: 4</span><br><span class="line">输出: [2, 2]</span><br><span class="line">解释: 目标面积是 4， 所有可能的构造方案有 [1,4], [2,2], [4,1]。</span><br><span class="line">但是根据要求2，[1,4] 不符合要求; 根据要求3，[2,2] 比 [4,1] 更能符合要求. 所以输出长度 L 为 2， 宽度 W 为 2。</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><ol><li>给定的面积不大于 10,000,000 且为正整数。</li><li>你设计的页面的长度和宽度必须都是正整数。</li></ol><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>暴力求解。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;492-构造矩形&quot;&gt;&lt;a href=&quot;#492-构造矩形&quot; class=&quot;headerlink&quot; title=&quot;492.构造矩形&quot;&gt;&lt;/a&gt;492.构造矩形&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="算法" scheme="http://feelerice.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/categories/LeetCode/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/LeetCode/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="数与位" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/%E6%95%B0%E4%B8%8E%E4%BD%8D/"/>
    
    <category term="数与位" scheme="http://feelerice.github.io/categories/%E6%95%B0%E4%B8%8E%E4%BD%8D/"/>
    
    <category term="简单数学题" scheme="http://feelerice.github.io/categories/%E6%95%B0%E4%B8%8E%E4%BD%8D/%E7%AE%80%E5%8D%95%E6%95%B0%E5%AD%A6%E9%A2%98/"/>
    
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/tags/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/tags/LeetCode/"/>
    
    <category term="数与位" scheme="http://feelerice.github.io/tags/%E6%95%B0%E4%B8%8E%E4%BD%8D/"/>
    
  </entry>
  
  <entry>
    <title>372.超级次方</title>
    <link href="http://feelerice.github.io/2021/10/23/372-%E8%B6%85%E7%BA%A7%E6%AC%A1%E6%96%B9/"/>
    <id>http://feelerice.github.io/2021/10/23/372-%E8%B6%85%E7%BA%A7%E6%AC%A1%E6%96%B9/</id>
    <published>2021-10-23T06:16:42.000Z</published>
    <updated>2021-10-23T07:27:32.996Z</updated>
    
    <content type="html"><![CDATA[<h1 id="372-超级次方"><a href="#372-超级次方" class="headerlink" title="372.超级次方"></a>372.超级次方</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>你的任务是计算 <code>ab</code> 对 <code>1337</code> 取模，<code>a</code> 是一个正整数，<code>b</code> 是一个非常大的正整数且会以数组形式给出。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>示例 1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：a = 2, b = [3]</span><br><span class="line">输出：8</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：a = 2, b = [1,0]</span><br><span class="line">输出：1024</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：a = 1, b = [4,3,3,8,5,2]</span><br><span class="line">输出：1</span><br></pre></td></tr></table></figure><p>示例 4：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：a = 2147483647, b = [2,0,0]</span><br><span class="line">输出：1198</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><ul><li><code>1 &lt;= a &lt;= 231 - 1</code></li><li><code>1 &lt;= b.length &lt;= 2000</code></li><li><code>0 &lt;= b[i] &lt;= 9</code></li><li><code>b</code> 不含前导 0</li></ul><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>对于<code>a^b</code>而言，其中b是一个数组可由以下例子得出</p><script type="math/tex; mode=display">\begin{equation}\begin{split}& b = [1,2,3,4] \\& a^b = a^{1000} * a^{200} * a^{30} * a^{4}\end{split}\end{equation}</script><p>所以对于数组的每一位我们都可以使用快速幂。</p><p>并且对于取模操作有以下特点</p><script type="math/tex; mode=display">\begin{equation}\begin{split}& 设a = Ak + C ，b = Bk +D \\& 那么对于 (a * b) \% k具有以下性质：\\& 因为(a * b) \% k \\&= (A*B*k + A*D*k + B*C*k + DC) \% k \\&= DC \%k \\& 又因为(a \% k * b \% k ) \% k \\&= CD \% k\\\\&所以可以得出  (a * b) \% k = (a \% k * b \% k ) \% k\end{split}\end{equation}</script><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">int</span> MOD = <span class="number">1337</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">superPow</span><span class="params">(<span class="keyword">int</span> a, <span class="keyword">int</span>[] b)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="comment">//上一次的底数</span></span><br><span class="line">    <span class="keyword">int</span> pre = a;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = b.length - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--) &#123;</span><br><span class="line">        <span class="keyword">int</span> num;</span><br><span class="line">        <span class="keyword">if</span> (i == b.length - <span class="number">1</span>) &#123;</span><br><span class="line">            num = quicklyPow(a, b[i]);</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">int</span> temp = quicklyPow(pre, <span class="number">10</span>);</span><br><span class="line">            pre = temp;</span><br><span class="line">            num = quicklyPow(temp, b[i]);</span><br><span class="line">        &#125;</span><br><span class="line">        ans = (ans % MOD) * (num % MOD);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans % MOD;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">quicklyPow</span><span class="params">(<span class="keyword">int</span> num, <span class="keyword">int</span> pow)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (pow == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (num == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> power = num % MOD;</span><br><span class="line">    <span class="keyword">while</span> (pow != <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((pow &amp; <span class="number">1</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">            ans = (ans % MOD) * (power % MOD);</span><br><span class="line">        &#125;</span><br><span class="line">        power = (power % MOD) * (power % MOD);</span><br><span class="line">        pow &gt;&gt;&gt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans % MOD;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;372-超级次方&quot;&gt;&lt;a href=&quot;#372-超级次方&quot; class=&quot;headerlink&quot; title=&quot;372.超级次方&quot;&gt;&lt;/a&gt;372.超级次方&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="算法" scheme="http://feelerice.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/categories/LeetCode/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/LeetCode/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="数与位" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/%E6%95%B0%E4%B8%8E%E4%BD%8D/"/>
    
    <category term="数与位" scheme="http://feelerice.github.io/categories/%E6%95%B0%E4%B8%8E%E4%BD%8D/"/>
    
    <category term="快速幂" scheme="http://feelerice.github.io/categories/%E6%95%B0%E4%B8%8E%E4%BD%8D/%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/tags/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/tags/LeetCode/"/>
    
    <category term="数与位" scheme="http://feelerice.github.io/tags/%E6%95%B0%E4%B8%8E%E4%BD%8D/"/>
    
  </entry>
  
  <entry>
    <title>50.Pow(x,n)</title>
    <link href="http://feelerice.github.io/2021/10/23/50-Pow/"/>
    <id>http://feelerice.github.io/2021/10/23/50-Pow/</id>
    <published>2021-10-23T05:22:40.000Z</published>
    <updated>2021-10-23T15:33:50.407Z</updated>
    
    <content type="html"><![CDATA[<h1 id="50-Pow-x-n"><a href="#50-Pow-x-n" class="headerlink" title="50.Pow(x,n)"></a>50.Pow(x,n)</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>实现 <a href="https://www.cplusplus.com/reference/valarray/pow/">pow(<em>x</em>, <em>n</em>)</a> ，即计算 x 的 n 次幂函数（即，xn）。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>示例 1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：x = 2.00000, n = 10</span><br><span class="line">输出：1024.00000</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：x = 2.10000, n = 3</span><br><span class="line">输出：9.26100</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入：x = 2.00000, n = -2</span><br><span class="line">输出：0.25000</span><br><span class="line">解释：2^-2 = 1/2^2 = 1/4 = 0.25</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><ul><li><code>-100.0 &lt; x &lt; 100.0</code></li><li><code>-231 &lt;= n &lt;= 231-1</code></li><li><code>-104 &lt;= xn &lt;= 104</code></li></ul><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>对于一个数的<code>n</code>次幂，我们可以使用以下例子演示解答：</p><script type="math/tex; mode=display">\begin{equation}9的2进制表达式为：(1001)_2 \\而 \quad 2^9 = 2^8 * 2^0 * 2^0 * 2^1 \\15的二进制表达式为：(1111)_2 \\而 \quad 2^{15} = 2^8 * 2^ 4 * 2^2 * 2^1\end{equation}</script><p>我们可以看到一个数的<code>n</code>次幂和<code>n</code>的二进制表达数的1有关。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">double</span> <span class="title">myPow</span><span class="params">(<span class="keyword">double</span> x, <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (n == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (x == <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">//处理越界情况当n = Integer.MIN_VALUE时，int中没有与其相对的正数</span></span><br><span class="line">    <span class="keyword">long</span> N = n;</span><br><span class="line">    <span class="keyword">double</span> ans = <span class="number">1.0</span>;</span><br><span class="line">    <span class="keyword">if</span> (N &lt; <span class="number">0</span>)&#123;</span><br><span class="line">        N *= -<span class="number">1</span>;</span><br><span class="line">        x = <span class="number">1.0</span> / x;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">double</span> power = x;</span><br><span class="line">    <span class="keyword">while</span> (N != <span class="number">0</span>)&#123;</span><br><span class="line">        <span class="keyword">if</span> ((N &amp; <span class="number">1</span>) == <span class="number">1</span>)&#123;</span><br><span class="line">            ans *= power;</span><br><span class="line">        &#125;</span><br><span class="line">        power *= power;</span><br><span class="line">        N &gt;&gt;&gt;= <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;50-Pow-x-n&quot;&gt;&lt;a href=&quot;#50-Pow-x-n&quot; class=&quot;headerlink&quot; title=&quot;50.Pow(x,n)&quot;&gt;&lt;/a&gt;50.Pow(x,n)&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;header</summary>
      
    
    
    
    <category term="算法" scheme="http://feelerice.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/categories/LeetCode/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/LeetCode/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="数与位" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/%E6%95%B0%E4%B8%8E%E4%BD%8D/"/>
    
    <category term="数与位" scheme="http://feelerice.github.io/categories/%E6%95%B0%E4%B8%8E%E4%BD%8D/"/>
    
    <category term="快速幂" scheme="http://feelerice.github.io/categories/%E6%95%B0%E4%B8%8E%E4%BD%8D/%E5%BF%AB%E9%80%9F%E5%B9%82/"/>
    
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/tags/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/tags/LeetCode/"/>
    
    <category term="数与位" scheme="http://feelerice.github.io/tags/%E6%95%B0%E4%B8%8E%E4%BD%8D/"/>
    
  </entry>
  
  <entry>
    <title>670.最大交换</title>
    <link href="http://feelerice.github.io/2021/10/22/670-%E6%9C%80%E5%A4%A7%E4%BA%A4%E6%8D%A2/"/>
    <id>http://feelerice.github.io/2021/10/22/670-%E6%9C%80%E5%A4%A7%E4%BA%A4%E6%8D%A2/</id>
    <published>2021-10-22T07:07:20.000Z</published>
    <updated>2021-10-22T07:38:52.088Z</updated>
    
    <content type="html"><![CDATA[<h1 id="670-最大交换"><a href="#670-最大交换" class="headerlink" title="670.最大交换"></a>670.最大交换</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给定一个非负整数，你<strong>至多</strong>可以交换一次数字中的任意两位。返回你能得到的最大值。</p><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p><strong>示例 1 :</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: 2736</span><br><span class="line">输出: 7236</span><br><span class="line">解释: 交换数字2和数字7。</span><br></pre></td></tr></table></figure><p><strong>示例 2 :</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">输入: 9973</span><br><span class="line">输出: 9973</span><br><span class="line">解释: 不需要交换。</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><ol><li>给定数字的范围是 [0, 108]</li></ol><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>我们只要需要将高位中较小的和低位中较大的交换即可。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maximumSwap</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span>[] arr = (num + <span class="string">&quot;&quot;</span>).toCharArray();</span><br><span class="line">    <span class="keyword">int</span> l = -<span class="number">1</span>, r = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">int</span> max = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = arr.length - <span class="number">1</span>; j &gt; i; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (arr[j] - arr[i] &gt; max)&#123;</span><br><span class="line">                max = arr[j] - arr[i];</span><br><span class="line">                r = j;</span><br><span class="line">                l = i;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (max != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (r != -<span class="number">1</span> &amp;&amp; l != -<span class="number">1</span>)&#123;</span><br><span class="line">        <span class="keyword">char</span> temp = arr[r];</span><br><span class="line">        arr[r] = arr[l];</span><br><span class="line">        arr[l] = temp;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">char</span> c : arr) &#123;</span><br><span class="line">        sb.append(c);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> Integer.valueOf(sb.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>贪心算法解决：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">maximumSwap</span><span class="params">(<span class="keyword">int</span> num)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">char</span>[] array = String.valueOf(num).toCharArray();</span><br><span class="line">    <span class="keyword">int</span>[] ints = <span class="keyword">new</span> <span class="keyword">int</span>[<span class="number">10</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">        ints[array[i] - <span class="string">&#x27;0&#x27;</span>] = i;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; array.length; i++) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">9</span>; j &gt; array[i] - <span class="string">&#x27;0&#x27;</span>; j--) &#123;</span><br><span class="line">            <span class="keyword">if</span> (ints[j] &gt; i)&#123;</span><br><span class="line">                <span class="keyword">char</span> temp = array[i];</span><br><span class="line">                array[i] = array[ints[j]];</span><br><span class="line">                array[ints[j]] = temp;</span><br><span class="line">                <span class="keyword">return</span> Integer.valueOf(<span class="keyword">new</span> String(array));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> num;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;670-最大交换&quot;&gt;&lt;a href=&quot;#670-最大交换&quot; class=&quot;headerlink&quot; title=&quot;670.最大交换&quot;&gt;&lt;/a&gt;670.最大交换&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; class=&quot;headerlink&quot; titl</summary>
      
    
    
    
    <category term="算法" scheme="http://feelerice.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/categories/LeetCode/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/LeetCode/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="数与位" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/%E6%95%B0%E4%B8%8E%E4%BD%8D/"/>
    
    <category term="数与位" scheme="http://feelerice.github.io/categories/%E6%95%B0%E4%B8%8E%E4%BD%8D/"/>
    
    <category term="数字的位操作" scheme="http://feelerice.github.io/categories/%E6%95%B0%E4%B8%8E%E4%BD%8D/%E6%95%B0%E5%AD%97%E7%9A%84%E4%BD%8D%E6%93%8D%E4%BD%9C/"/>
    
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/tags/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/tags/LeetCode/"/>
    
    <category term="数与位" scheme="http://feelerice.github.io/tags/%E6%95%B0%E4%B8%8E%E4%BD%8D/"/>
    
  </entry>
  
  <entry>
    <title>168.Excel表列名称</title>
    <link href="http://feelerice.github.io/2021/10/22/168-Excel%E8%A1%A8%E5%88%97%E5%90%8D%E7%A7%B0/"/>
    <id>http://feelerice.github.io/2021/10/22/168-Excel%E8%A1%A8%E5%88%97%E5%90%8D%E7%A7%B0/</id>
    <published>2021-10-22T06:49:53.000Z</published>
    <updated>2021-10-22T07:00:58.381Z</updated>
    
    <content type="html"><![CDATA[<h1 id="168-Excel表列名称"><a href="#168-Excel表列名称" class="headerlink" title="168.Excel表列名称"></a>168.Excel表列名称</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给你一个整数 columnNumber ，返回它在 Excel 表中相对应的列名称。</p><p>例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">A -&gt; 1</span><br><span class="line">B -&gt; 2</span><br><span class="line">C -&gt; 3</span><br><span class="line">...</span><br><span class="line">Z -&gt; 26</span><br><span class="line">AA -&gt; 27</span><br><span class="line">AB -&gt; 28 </span><br><span class="line">...</span><br></pre></td></tr></table></figure><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>示例 1：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：columnNumber = 1</span><br><span class="line">输出：&quot;A&quot;</span><br></pre></td></tr></table></figure><p>示例 2：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：columnNumber = 28</span><br><span class="line">输出：&quot;AB&quot;</span><br></pre></td></tr></table></figure><p>示例 3：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：columnNumber = 701</span><br><span class="line">输出：&quot;ZY&quot;</span><br></pre></td></tr></table></figure><p>示例 4：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入：columnNumber = 2147483647</span><br><span class="line">输出：&quot;FXSHRXW&quot;</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><ul><li><code>1 &lt;= columnNumber &lt;= 231 - 1</code></li></ul><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>这道题其实就是10进制转26进制。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">convertToTitle</span><span class="params">(<span class="keyword">int</span> columnNumber)</span> </span>&#123;</span><br><span class="line">    StringBuilder sb = <span class="keyword">new</span> StringBuilder();</span><br><span class="line">    <span class="keyword">while</span> (columnNumber != <span class="number">0</span>) &#123;</span><br><span class="line">        columnNumber--;</span><br><span class="line">        <span class="keyword">int</span> temp = columnNumber % <span class="number">26</span>;</span><br><span class="line">        <span class="keyword">char</span> ch = (<span class="keyword">char</span>) (<span class="string">&#x27;A&#x27;</span> + temp);</span><br><span class="line">        sb.append(ch);</span><br><span class="line">        columnNumber /= <span class="number">26</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sb.reverse().toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;168-Excel表列名称&quot;&gt;&lt;a href=&quot;#168-Excel表列名称&quot; class=&quot;headerlink&quot; title=&quot;168.Excel表列名称&quot;&gt;&lt;/a&gt;168.Excel表列名称&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; cla</summary>
      
    
    
    
    <category term="算法" scheme="http://feelerice.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/categories/LeetCode/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/LeetCode/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="数与位" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/%E6%95%B0%E4%B8%8E%E4%BD%8D/"/>
    
    <category term="数与位" scheme="http://feelerice.github.io/categories/%E6%95%B0%E4%B8%8E%E4%BD%8D/"/>
    
    <category term="数字的位操作" scheme="http://feelerice.github.io/categories/%E6%95%B0%E4%B8%8E%E4%BD%8D/%E6%95%B0%E5%AD%97%E7%9A%84%E4%BD%8D%E6%93%8D%E4%BD%9C/"/>
    
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/tags/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/tags/LeetCode/"/>
    
    <category term="数与位" scheme="http://feelerice.github.io/tags/%E6%95%B0%E4%B8%8E%E4%BD%8D/"/>
    
  </entry>
  
  <entry>
    <title>171.Excel表列序号</title>
    <link href="http://feelerice.github.io/2021/10/22/171-Excel%E8%A1%A8%E5%88%97%E5%BA%8F%E5%8F%B7/"/>
    <id>http://feelerice.github.io/2021/10/22/171-Excel%E8%A1%A8%E5%88%97%E5%BA%8F%E5%8F%B7/</id>
    <published>2021-10-22T06:38:03.000Z</published>
    <updated>2021-10-22T06:48:39.478Z</updated>
    
    <content type="html"><![CDATA[<h1 id="171-Excel表列序号"><a href="#171-Excel表列序号" class="headerlink" title="171.Excel表列序号"></a>171.Excel表列序号</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>给你一个字符串 columnTitle ，表示 Excel 表格中的列名称。返回该列名称对应的列序号。</p><p>例如，</p><pre><code>A -&gt; 1B -&gt; 2C -&gt; 3...Z -&gt; 26AA -&gt; 27AB -&gt; 28 ...</code></pre><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>示例1</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: columnTitle = &quot;A&quot;</span><br><span class="line">输出: 1</span><br></pre></td></tr></table></figure><p>示例2</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: columnTitle = &quot;AB&quot;</span><br><span class="line">输出: 28</span><br></pre></td></tr></table></figure><p>示例3</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: columnTitle = &quot;ZY&quot;</span><br><span class="line">输出: 701</span><br></pre></td></tr></table></figure><p>示例4</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: columnTitle = &quot;FXSHRXW&quot;</span><br><span class="line">输出: 2147483647</span><br></pre></td></tr></table></figure><p>示例5</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">输入: columnTitle = &quot;FXSHRXW&quot;</span><br><span class="line">输出: 2147483647</span><br></pre></td></tr></table></figure><h2 id="提示"><a href="#提示" class="headerlink" title="提示"></a>提示</h2><ul><li>1 &lt;= columnTitle.length &lt;= 7</li><li>columnTitle 仅由大写英文组成</li><li>columnTitle 在范围 [“A”, “FXSHRXW”] 内</li></ul><h2 id="解法一"><a href="#解法一" class="headerlink" title="解法一"></a>解法一</h2><h3 id="思路"><a href="#思路" class="headerlink" title="思路"></a>思路</h3><p>其实这道题就是一个26进制转为10进制。</p><h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">titleToNumber</span><span class="params">(String columnTitle)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">char</span>[] chars = columnTitle.toCharArray();</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = chars.length - <span class="number">1</span>, j = <span class="number">0</span>; i &gt;= <span class="number">0</span>; i--, j++) &#123;</span><br><span class="line">        ans += (chars[i] - <span class="string">&#x27;A&#x27;</span> + <span class="number">1</span>)  * Math.pow(<span class="number">26</span>, j);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;171-Excel表列序号&quot;&gt;&lt;a href=&quot;#171-Excel表列序号&quot; class=&quot;headerlink&quot; title=&quot;171.Excel表列序号&quot;&gt;&lt;/a&gt;171.Excel表列序号&lt;/h1&gt;&lt;h2 id=&quot;问题&quot;&gt;&lt;a href=&quot;#问题&quot; cla</summary>
      
    
    
    
    <category term="算法" scheme="http://feelerice.github.io/categories/%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/categories/LeetCode/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/LeetCode/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="数与位" scheme="http://feelerice.github.io/categories/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/%E6%95%B0%E4%B8%8E%E4%BD%8D/"/>
    
    <category term="数与位" scheme="http://feelerice.github.io/categories/%E6%95%B0%E4%B8%8E%E4%BD%8D/"/>
    
    <category term="数字的位操作" scheme="http://feelerice.github.io/categories/%E6%95%B0%E4%B8%8E%E4%BD%8D/%E6%95%B0%E5%AD%97%E7%9A%84%E4%BD%8D%E6%93%8D%E4%BD%9C/"/>
    
    
    <category term="从零开始刷算法" scheme="http://feelerice.github.io/tags/%E4%BB%8E%E9%9B%B6%E5%BC%80%E5%A7%8B%E5%88%B7%E7%AE%97%E6%B3%95/"/>
    
    <category term="LeetCode" scheme="http://feelerice.github.io/tags/LeetCode/"/>
    
    <category term="数与位" scheme="http://feelerice.github.io/tags/%E6%95%B0%E4%B8%8E%E4%BD%8D/"/>
    
  </entry>
  
</feed>
